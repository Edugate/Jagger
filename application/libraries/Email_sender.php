<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');
/**
 * ResourceRegistry3
 *
 * @package     RR3
 * @author      Middleware Team HEAnet
 * @copyright   Copyright (c) 2012, HEAnet Limited (http://www.heanet.ie)
 * @license     MIT http://www.opensource.org/licenses/mit-license.php
 *
 */

/**
 * Email_sender Class
 *
 * @package     RR3
 * @subpackage  Libraries
 * @author      Janusz Ulanowski <janusz.ulanowski@heanet.ie>
 */
class Email_sender
{

    protected $mailFooter;

    function __construct()
    {
        $this->ci = &get_instance();
        $this->ci->load->library('doctrine');
        $this->em = $this->ci->doctrine->em;
        $this->mailFooter = $this->ci->rrpreference->getTextValueByName('mailfooter');

    }

    // allow to create and use templates in following langs
    static function getLangs()
    {
        $r = array_keys(languagesCodes());
        return $r;
    }

    function addToMailQueue($notificationTypes = NULL, $obj = NULL, $subject, $body, $additionalReciepients, $sync = false)
    {
        log_message('debug', 'JANUSZ 21 ' . $notificationTypes);
        $currdatetime = new \DateTime("now", new \DateTimeZone('UTC'));
        $body .= PHP_EOL . 'The message was generated by the system on ' . $currdatetime->format('Y/m/d H:i') . ' UTC' . PHP_EOL;
        /**
         * @var $subscribers models\NotificationList[]
         */
        $subscribers = array();
        $finalNotificationTypes = array();
        if (!empty($notificationTypes)) {
            if (is_array($notificationTypes)) {
                $finalNotificationTypes = $notificationTypes;
                $finalNotificationTypes[] = 'systemnotifications';
            } else {
                $finalNotificationTypes[] = $notificationTypes;

            }
            $subscribers = $this->em->getRepository("models\NotificationList")->findBy(
                array('type' => $notificationTypes, 'is_enabled' => true, 'is_approved' => true, 'notificationtype' => 'mail'));
        }

        $alreadyMailTo = array();


        foreach ($subscribers as $s) {
            $type = $s->getType();
            if ($type === 'joinfedreq') {
                if (empty($obj)) {
                    continue;
                }
                if (!$obj instanceOf models\Federation) {
                    continue;
                }
                $objId = $obj->getId();
                $fed = $s->getFederation();
                if (empty($fed)) {
                    continue;
                }
                $fedId = $fed->getId();
                if ($fedId == $objId) {
                    $alreadyMailTo[] = $s->getRcpt();
                }
            } elseif ($type === 'fedmembersmodified') {

                if (empty($obj)) {
                    continue;
                }
                if (is_array($obj)) {

                    foreach ($obj as $v) {
                        if ($v instanceOf models\Federation) {


                            $objId = $v->getId();
                            $fed = $s->getFederation();
                            if (empty($fed)) {
                                continue;
                            }
                            $fedId = $fed->getId();
                            if ($fedId == $objId) {
                                $alreadyMailTo[] = $s->getRcpt();
                            }
                        }
                    }
                } elseif ($obj instanceOf models\Federation) {
                    log_message('debug', 'JANUSZ type2:' . $type);
                    $objId = $obj->getId();
                    $fed = $s->getFederation();
                    if (empty($fed)) {
                        continue;
                    }
                    $fedId = $fed->getId();
                    if ($fedId == $objId) {
                        $alreadyMailTo[] = $s->getRcpt();
                    }
                }
            } elseif ($type === 'fedmemberschanged') {

                if (empty($obj)) {
                    continue;
                }
                if (is_array($obj)) {
                    foreach ($obj as $v) {
                        if ($v instanceOf models\Federation) {
                            $objId = $obj->getId();
                            $fed = $s->getFederation();
                            if (empty($fed)) {
                                continue;
                            }
                            $fedId = $fed->getId();
                            if ($fedId == $objId) {
                                $alreadyMailTo[] = $s->getRcpt();
                            }
                        }
                    }
                } elseif ($obj instanceOf models\Federation) {
                    $objId = $obj->getId();
                    $fed = $s->getFederation();
                    if (empty($fed)) {
                        continue;
                    }
                    $fedId = $fed->getId();
                    if ($fedId == $objId) {
                        $alreadyMailTo[] = $s->getRcpt();
                    }
                }


            } elseif ($type === 'requeststoproviders') {
                if (!(!empty($obj) && ($obj instanceOf models\Provider))) {
                    continue;
                }
                $objId = $obj->getId();
                $prov = $s->getProvider();
                if (empty($prov)) {
                    continue;
                }
                $provId = $prov->getId();
                if ($provId == $objId) {
                    $alreadyMailTo[] = $s->getRcpt();
                }
            }
        }


        if (!empty($additionalReciepients) && is_array($additionalReciepients) && count($additionalReciepients) > 0) {
            foreach ($additionalReciepients as $v) {

                $alreadyMailTo[] = strtolower($v);
            }
        }
        $alreadyMailTo = array_unique($alreadyMailTo, SORT_STRING);
        foreach ($alreadyMailTo as $mailto) {
            $m = new models\MailQueue();
            $m->setSubject($subject);
            $m->setBody($body);
            $m->setDeliveryType('mail');
            $m->setRcptto($mailto);
            $this->em->persist($m);
        }


        if ($sync === TRUE) {
            try {
                $this->em->flush();
                return TRUE;
            } catch (Exception $e) {
                log_message('error', __METHOD__ . ' ' . $e);
                return FALSE;
            }
        }
        return true;
    }

    static function mailTemplatesGroups()
    {
        $result = array(
            'fedregresquest' => array('federation registration request', 'desclang' => 'templfedregreq', 'args' => array('fedname', 'srcip', 'requsername', 'reqemail', 'token', 'qurl', 'datetimeutc')),
            'spregresquest' => array('sp registration request', 'desclang' => 'templspregreq', 'args' => array('token', 'srcip', 'entorgname', 'entityid', 'reqemail', 'requsername', 'reqfullname', 'datetimeutc', 'qurl')),
            'idpregresquest' => array('idp registration request', 'desclang' => 'templidpregreq', 'args' => array('token', 'srcip', 'entorgname', 'entityid', 'reqemail', 'requsername', 'reqfullname', 'datetimeutc', 'qurl')),
            'userregresquest' => array('user registration request', 'desclang' => 'templuserregreq', 'args' => array('token', 'srcip', 'reqemail', 'requsername', 'reqfullname', 'qurl', 'datetimeutc')),
        );
        return $result;
    }

    /**
     * @param $group
     * @param $replacements
     * @return array|null
     */
    function generateLocalizedMail($group, $replacements)
    {
        $templates = $this->em->getRepository("models\MailLocalization")->findBy(array('mgroup' => $group, 'isenabled' => TRUE));
        if (count($templates) == 0) {
            return null;
        }
        $tmpgroups = self::mailTemplatesGroups();
        $mygroup = $tmpgroups['' . $group . ''];
        $patterns = array();
        foreach ($mygroup['args'] as $a) {
            $patterns['' . $a . ''] = '/_' . $a . '_/';
        }
        ksort($patterns);
        ksort($replacements);
        $defaultTemplate = null;
        $attachedTemplates = array();
        foreach ($templates as $t) {
            if ($t->isDefault()) {
                $defaultTemplate = $t;
                continue;
            }
            if ($t->isAlwaysAttached()) {
                $attachedTemplates[] = $t;
            }
        }
        if (empty($defaultTemplate)) {
            return null;
        }
        $result = array();
        $result['subject'] = preg_replace($patterns, $replacements, $defaultTemplate->getSubject());
        $body = preg_replace($patterns, $replacements, $defaultTemplate->getBody());
        foreach ($attachedTemplates as $t) {
            $body .= PHP_EOL . '===== ' . preg_replace($patterns, $replacements, $t->getSubject()) . ' ====' . PHP_EOL;
            $body .= PHP_EOL . preg_replace($patterns, $replacements, $t->getBody());
        }
        $result['body'] = $body . PHP_EOL . PHP_EOL;
        return $result;
    }

    /**
     * @param \models\Provider $ent
     * @param \models\Tracker $tracker
     */
    function providerIsModified(\models\Provider $ent, \models\Tracker $tracker)
    {

            /**
             * @var $federations models\Federation[]
             */
            $federations = $ent->getActiveFederations()->toArray();

            $trackChange = @unserialize($tracker->getDetail());
            $body ='Dear user,'.PHP_EOL;
            $body .='Provider ('.$ent->getEntityId().' has been modified by '.$this->ci->j_auth->current_user().' from '.$this->ci->input->ip_address().PHP_EOL.PHP_EOL;
            if(is_array($trackChange)) {
                foreach ($trackChange as $k => $v) {
                    $rows = '';
                    if (is_array($v)) {
                        $rows = '';
                        foreach ($v as $p => $l) {
                            $rows .= sprintf("%s:".PHP_EOL."%s" . PHP_EOL, $p, str_replace("<br />", "\n", $l));
                        }
                    }
                    $body .= sprintf("= %s =" . PHP_EOL . "%s" . PHP_EOL, $k, $rows);
                }

                $this->addToMailQueue('fedmembersmodified', $federations, 'Provider has been modified', $body, false);
            }

    }

    function providerRegRequest($type, $args)
    {
        $params = array(
            'requestermail' => '',
            'requestersourceip' => '',
            'serviceentityid' => '',
            'servicename' => '',
            'orgname' => '',
            'token' => '',
        );

        $merged = array_merge($params, $args);
        $isidp = false;
        if (strcasecmp($type, 'idp') == 0) {
            $r['subject'] = 'IDP registration request';
            $isidp = true;
        } elseif (strcasecmp($type, 'sp') == 0) {
            $r['subject'] = 'SP registration request';
        } else {
            return null;
        }

        $b = 'Dear user,' . PHP_EOL . 'You have received this mail because your email address is on the notification list' . PHP_EOL;
        if ($isidp) {
            $b .= $merged['requestermail'] . ' completed a new Identity Provider Registration' . PHP_EOL;
        } else {
            $b .= $merged['requestermail'] . ' completed a new Service Provider Registration' . PHP_EOL;
        }
        if (!empty($merged['requestersourceip'])) {
            $b .= 'Request has been sent from: ' . $merged['requestersourceip'] . PHP_EOL;
        }
        if (!empty($merged['token'])) {
            $b .= 'If you have sufficient permissions you can approve/reject it on ' . base_url() . 'reports/awaiting/detail/' . $merged['token'] . PHP_EOL;
        } else {
            $b .= 'If you have sufficient permissions you can approve/reject it on ' . base_url() . '' . PHP_EOL;
        }

        $r['body'] = $b;
        return $r;
    }

}
