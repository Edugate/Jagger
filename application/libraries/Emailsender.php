<?php
if (!defined('BASEPATH')) {
    exit('No direct script access allowed');
}

/**
 * @package     Jagger
 * @author      Janusz Ulanowski <janusz.ulanowski@heanet.ie>
 * @author      Middleware Team HEAnet
 * @copyright   2016 HEAnet Limited (http://www.heanet.ie)
 * @license     MIT http://www.opensource.org/licenses/mit-license.php
 */
class Emailsender
{

    protected $mailFooter;

    public function __construct() {
        $this->ci = &get_instance();
        $this->ci->load->library('doctrine');
        $this->em = $this->ci->doctrine->em;
        $this->mailFooter = $this->ci->rrpreference->getTextValueByName('mailfooter');

    }

    // allow to create and use templates in following langs
    public static function getLangs() {
        return array_keys(languagesCodes());
    }

    /**
     * @param null|array $notifTypes
     * @param null|array $obj
     * @param $subject
     * @param $body
     * @param $additionalRcpts
     * @param bool $sync
     * @return bool
     */
    public function addToMailQueue($notifTypes = null, $obj = null, $subject, $body, $additionalRcpts, $sync = false) {
        log_message('debug', 'EMAIL ' . __METHOD__ . ' fired for subj: ' . $subject);
        $currdatetime = new \DateTime('now', new \DateTimeZone('UTC'));
        $body .= PHP_EOL . 'The message was generated by the system on ' . $currdatetime->format('Y/m/d H:i') . ' UTC' . PHP_EOL;

        $fnlNotiftypes = (array)$notifTypes;
        $fnlNotiftypes[] = 'systemnotifications';
        $fnlNotiftypes = array_unique($fnlNotiftypes);


        /**
         * @var $subscribers models\NotificationList[]
         */
        $subscribers = $this->em->getRepository("models\NotificationList")->findBy(
            array('type' => $fnlNotiftypes, 'is_enabled' => true, 'is_approved' => true, 'notificationtype' => 'mail'));

        $alreadyMailTo = array();

        foreach ($subscribers as $s) {
            $type = $s->getType();

            if ($type === 'systemnotifications') {
                $alreadyMailTo[] = $s->getRcpt();
            } elseif ($type === 'joinfedreq') {
                if (empty($obj)) {
                    continue;
                }
                if (!$obj instanceOf models\Federation) {
                    continue;
                }
                $objId = $obj->getId();
                $fed = $s->getFederation();
                if (empty($fed)) {
                    continue;
                }
                $fedId = $fed->getId();
                if ($fedId == $objId) {
                    $alreadyMailTo[] = $s->getRcpt();
                }
            } elseif ($type === 'providermodified') {
                if ($obj instanceOf models\Provider) {
                    $objId = $obj->getId();
                    $prov = $s->getProvider();
                    if (!empty($prov) && $prov->getId() === $objId) {
                        $alreadyMailTo[] = $s->getRcpt();
                    }
                }
            } elseif ($type === 'fedmembersmodified') {

                if (empty($obj)) {
                    continue;
                }
                if (is_array($obj)) {

                    foreach ($obj as $v) {
                        if ($v instanceOf models\Federation) {


                            $objId = $v->getId();
                            $fed = $s->getFederation();
                            if (empty($fed)) {
                                continue;
                            }
                            $fedId = $fed->getId();
                            if ($fedId == $objId) {
                                $alreadyMailTo[] = $s->getRcpt();
                            }
                        }
                    }
                } elseif ($obj instanceOf models\Federation) {
                    $objId = $obj->getId();
                    $fed = $s->getFederation();
                    if (empty($fed)) {
                        continue;
                    }
                    $fedId = $fed->getId();
                    if ($fedId == $objId) {
                        $alreadyMailTo[] = $s->getRcpt();
                    }
                }
            } elseif ($type === 'fedmemberschanged') {

                if (empty($obj)) {
                    continue;
                }
                if (is_array($obj)) {
                    foreach ($obj as $v) {
                        if ($v instanceOf models\Federation) {
                            $objId = $obj->getId();
                            $fed = $s->getFederation();
                            if (empty($fed)) {
                                continue;
                            }
                            $fedId = $fed->getId();
                            if ($fedId == $objId) {
                                $alreadyMailTo[] = $s->getRcpt();
                            }
                        }
                    }
                } elseif ($obj instanceOf models\Federation) {
                    $objId = $obj->getId();
                    $fed = $s->getFederation();
                    if (empty($fed)) {
                        continue;
                    }
                    $fedId = $fed->getId();
                    if ($fedId == $objId) {
                        $alreadyMailTo[] = $s->getRcpt();
                    }
                }


            } elseif ($type === 'requeststoproviders') {
                if (!(!empty($obj) && ($obj instanceOf models\Provider))) {
                    continue;
                }
                $objId = $obj->getId();
                $prov = $s->getProvider();
                if (empty($prov)) {
                    continue;
                }
                $provId = $prov->getId();
                if ($provId == $objId) {
                    $alreadyMailTo[] = $s->getRcpt();
                }
            }
        }


        if (!empty($additionalRcpts) && is_array($additionalRcpts) && count($additionalRcpts) > 0) {
            foreach ($additionalRcpts as $v) {

                $alreadyMailTo[] = strtolower($v);
            }
        }
        $alreadyMailTo = array_unique($alreadyMailTo, SORT_STRING);
        foreach ($alreadyMailTo as $mailto) {
            if (!filter_var($mailto, FILTER_VALIDATE_EMAIL)) {
                log_message('error', 'EMAIL ' . __METHOD__ . ' incorrect email found "' . $mailto . '" - please check subscription and user table for incorrect email');
            } else {
                log_message('debug', 'EMAIL ' . __METHOD__ . ' preparing email for "' . $mailto . '"');
                $m = new models\MailQueue();
                $m->setSubject($subject);
                $m->setBody($body);
                $m->setDeliveryType('mail');

                $m->setRcptto($mailto);
                $this->em->persist($m);
            }

        }


        if ($sync === true) {
            try {
                $this->em->flush();
            } catch (Exception $e) {
                log_message('error', 'EMAIL ' . __METHOD__ . ' ' . $e);
                return false;
            }
        }
        return true;
    }

    public static function mailTemplatesGroups() {
        $result = array(
            'fedregresquest' => array('federation registration request', 'desclang' => 'templfedregreq', 'args' => array('fedname', 'srcip', 'requsername', 'reqemail', 'token', 'qurl', 'datetimeutc')),
            'spregresquest' => array('sp registration request', 'desclang' => 'templspregreq', 'args' => array('token', 'srcip', 'entorgname', 'entityid', 'reqemail', 'requsername', 'reqfullname', 'datetimeutc', 'qurl')),
            'idpregresquest' => array('idp registration request', 'desclang' => 'templidpregreq', 'args' => array('token', 'srcip', 'entorgname', 'entityid', 'reqemail', 'requsername', 'reqfullname', 'datetimeutc', 'qurl')),
            'userregresquest' => array('user registration request', 'desclang' => 'templuserregreq', 'args' => array('token', 'srcip', 'reqemail', 'requsername', 'reqfullname', 'qurl', 'datetimeutc')),
        );

        return $result;
    }

    /**
     * @param $group
     * @param $replacements
     * @return array|null
     */
    public function generateLocalizedMail($group, $replacements) {
        $templates = $this->em->getRepository("models\MailLocalization")->findBy(array('mgroup' => $group, 'isenabled' => true));
        if (count($templates) == 0) {
            return null;
        }
        $tmpgroups = self::mailTemplatesGroups();
        $mygroup = $tmpgroups['' . $group . ''];
        $patterns = array();
        foreach ($mygroup['args'] as $a) {
            $patterns['' . $a . ''] = '/_' . $a . '_/';
        }
        ksort($patterns);
        ksort($replacements);
        $defaultTemplate = null;
        $attachedTemplates = array();
        foreach ($templates as $t) {
            if ($t->isDefault()) {
                $defaultTemplate = $t;
                continue;
            }
            if ($t->isAlwaysAttached()) {
                $attachedTemplates[] = $t;
            }
        }
        if (empty($defaultTemplate)) {
            return null;
        }
        $result = array();
        $result['subject'] = preg_replace($patterns, $replacements, $defaultTemplate->getSubject());
        $body = preg_replace($patterns, $replacements, $defaultTemplate->getBody());
        foreach ($attachedTemplates as $t) {
            $body .= PHP_EOL . '===== ' . preg_replace($patterns, $replacements, $t->getSubject()) . ' ====' . PHP_EOL;
            $body .= PHP_EOL . preg_replace($patterns, $replacements, $t->getBody());
        }
        $result['body'] = $body . PHP_EOL . PHP_EOL;

        return $result;
    }

    public function applyForEntcatRegPol(models\Coc $coc, models\Provider $provider) {
        $type = $coc->getType();
        $sbj = 'Request: Permission to assign Registration Policy';
        if ($type === 'entcat') {
            $sbj = 'Request: Permission to assign Entity Category';
        }

        $body = 'Dear user' . PHP_EOL;
        $body .= 'There is new request in the system:' . PHP_EOL . $sbj . PHP_EOL;
        $body .= 'Provider: ' . $provider->getEntityId() . PHP_EOL;
        $this->addToMailQueue('systemnotifications', null, $sbj, $body, false);

    }

    /**
     * @param \models\Provider $provider
     * @param array $newScopes
     */
    public function applyForEntityUpdate(models\Provider $provider, array $newScopes) {
        $sbj = 'Request: Provider update needs to be approved';
        $body = 'Dear user,' . PHP_EOL .
            'There is new request in the system waiting for approval:' . PHP_EOL .
            'Sent by: ' . $this->ci->jauth->getLoggedinUsername() . PHP_EOL .
            'Source IP ' . $this->ci->input->ip_address() . PHP_EOL .
            'Provider: ' . $provider->getEntityId() . PHP_EOL .
            'Scope(s):' . PHP_EOL;
        foreach (array_keys($newScopes) as $v) {
            $body .= $v . ': ' . implode(', ', $newScopes['' . $v . '']) . PHP_EOL;
        }
        $this->addToMailQueue('systemnotifications', null, $sbj, $body, false);

    }

    /**
     * @param \models\Provider $ent
     * @param \models\Tracker $tracker
     */
    public function providerIsModified(\models\Provider $ent, \models\Tracker $tracker) {

        /**
         * @var $federations models\Federation[]
         */
        $federations = $ent->getActiveFederations()->toArray();

        $trackChange = @unserialize($tracker->getDetail());
        $body = 'Dear user,' . PHP_EOL;
        $body .= 'Provider (' . $ent->getEntityId() . ' has been modified by ' . $this->ci->jauth->getLoggedinUsername() . ' from ' . $this->ci->input->ip_address() . PHP_EOL . PHP_EOL;
        if (is_array($trackChange)) {
            foreach ($trackChange as $k => $v) {
                $rows = '';
                if (is_array($v)) {
                    $rows = '';
                    foreach ($v as $p => $l) {
                        $rows .= sprintf('%s:' . PHP_EOL . '%s' . PHP_EOL, $p, str_replace('<br />', PHP_EOL, $l));
                    }
                }
                $body .= sprintf('= %s =' . PHP_EOL . '%s' . PHP_EOL, $k, $rows);
            }

            $this->addToMailQueue('fedmembersmodified', $federations, 'Provider has been modified', $body, false);
            $this->addToMailQueue('providermodified', $ent, 'Provider has been modified', $body, false);
        }

    }

    public function providerRegRequest($type, $args) {
        $params = array(
            'requestermail' => '',
            'requestersourceip' => '',
            'serviceentityid' => '',
            'servicename' => '',
            'orgname' => '',
            'token' => '',
        );

        $merged = array_merge($params, $args);
        $isidp = false;
        if (strcasecmp($type, 'idp') == 0) {
            $result['subject'] = 'IDP registration request';
            $isidp = true;
        } elseif (strcasecmp($type, 'sp') == 0) {
            $result['subject'] = 'SP registration request';
        } else {
            return null;
        }

        $body = 'Dear user,' . PHP_EOL . 'You have received this mail because your email address is on the notification list' . PHP_EOL;
        if ($isidp) {
            $body .= $merged['requestermail'] . ' completed a new Identity Provider Registration' . PHP_EOL;
        } else {
            $body .= $merged['requestermail'] . ' completed a new Service Provider Registration' . PHP_EOL;
        }
        if (!empty($merged['requestersourceip'])) {
            $body .= 'Request has been sent from: ' . $merged['requestersourceip'] . PHP_EOL;
        }
        if (!empty($merged['token'])) {
            $body .= 'If you have sufficient permissions you can approve/reject it on ' . base_url() . 'reports/awaiting/detail/' . $merged['token'] . PHP_EOL;
        } else {
            $body .= 'If you have sufficient permissions you can approve/reject it on ' . base_url() . '' . PHP_EOL;
        }

        $result['body'] = $body;

        return $result;
    }

    /**
     * @param \models\FederationMembers $membership
     */
    public function membershipStateChanged(\models\FederationMembers $membership) {
        $sbj = 'Membership status change';
        $body = 'Dear user,' . PHP_EOL .
            'You have received this mail becuase ' . PHP_EOL .
            'you email address is on the notification list' . PHP_EOL .
            'User ' . $this->ci->jauth->getLoggedinUsername() . ' from ' . $this->ci->input->ip_address() .
            'has changed membership status: ' . PHP_EOL .
            'entityId: ' . html_escape($membership->getProvider()->getEntityId()) . PHP_EOL .
            'federation: "' . html_escape($membership->getFederation()->getName()) . '"' . PHP_EOL .
            'The new membership status: ' . PHP_EOL;
        $isDisabled = $membership->isDisabled();
        $isBanned = $membership->isBanned();
        if ($isBanned === false && $isDisabled === false) {
            $body .= '- fully active' . PHP_EOL;
        } else {
            if ($isBanned) {
                $body .= '- administratively suspended' . PHP_EOL;
            } else {
                $body .= '- administratively active' . PHP_EOL;
            }
            if ($isDisabled) {
                $body .= '- temporary suspended' . PHP_EOL;
            } else {
                $body .= '- active' . PHP_EOL;
            }
        }
        $this->addToMailQueue(array('providermodified'), $membership->getProvider(), $sbj, $body, false);


    }

    public function feduserRegistrationRequest($templateArgs) {
        $result = $this->generateLocalizedMail('userregresquest', $templateArgs);
        if (!empty($result)) {
            return $result;
        }
        $sbj = 'User registration request';
        $body = 'Dear user,' . PHP_EOL .
            'You have received this mail because ' .
            'your email address is on the notification list' . PHP_EOL .
            'User from ' . $this->ci->input->ip_address() .
            ' using federated access has applied for an account.' . PHP_EOL .
            'Please review the request and make appriopriate ' .
            'action (reject/approve)' . PHP_EOL .
            'Details about the request: ' . base_url('reports/awaitinglist') . PHP_EOL;

        return array(
            'subject' => $sbj,
            'body' => $body,
        );

    }

}
