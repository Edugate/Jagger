/* jshint strict: false */
/*jslint browser: true */
/*jslint plusplus: true */
/*global $, jQuery, alert, google, console, Chart, Jagger, hljs */

////////////////////////////////////
////////////////////////////////////
/////// plugins ///////////////////
$.fn.dataTable.ext.search.push(
    function (settings, data, dataIndex) {
        var category = $('#entityc').val(), stype = data[0];
        return (category === undefined || category === '' || (stype === '1' && category === 'local') || (stype === '0' && category === 'external'));
    }
);
/*global $ */
// Generated by CoffeeScript 1.8.0
(function () {
    var $;
    $ = this.jQuery;
    $.fn.extend({
        confirmWithReveal: function (options) {
            var defaults, do_confirm, handler, settings;
            if (options === null) {
                options = {};
            }
            defaults = {
                modal_class: 'small',
                title: 'Are you sure?',
                title_class: '',
                body: 'This action cannot be undone.',
                body_class: '',
                password: false,
                prompt: 'Type <strong>%s</strong> to continue:',
                footer_class: '',
                ok: 'Confirm',
                ok_class: 'button small',
                cancel: 'Cancel',
                cancel_class: 'button small alert'
            };
            settings = $.extend({}, defaults, options);
            do_confirm = function ($el) {
                var confirm_button, confirm_html, confirm_label, el_options, modal, option, password, _ref;
                el_options = $el.data('confirm');
                if ($el.attr('data-confirm') === null) {
                    return true;
                }
                if ((typeof el_options === 'string') && (el_options.length > 0)) {
                    return (((_ref = $.rails) !== null ? _ref.confirm : void 0) || window.confirm).call(window, el_options);
                }
                option = function (name) {
                    return el_options[name] || settings[name];
                };
                modal = $("<div data-reveal class='reveal " + (option('modal_class')) + "'>\n  <h2 data-confirm-title class='" + (option('title_class')) + "'></h2>\n  <p data-confirm-body class='" + (option('body_class')) + "'></p>\n  <div data-confirm-footer class='" + (option('footer_class')) + "'>\n    <a data-confirm-cancel class='" + (option('cancel_class')) + "'></a>\n  </div>\n</div>");
                confirm_button = $el.is('a') ? $el.clone() : $('<a/>');
                confirm_button.removeAttr('data-confirm').attr('class', option('ok_class')).html(option('ok')).on('click', function (e) {
                    if ($(this).prop('disabled')) {
                        return false;
                    }
                    $el.trigger('confirm.reveal', e);
                    if ($el.is('form, :input')) {
                        return $el.closest('form').removeAttr('data-confirm').submit();
                    }
                });
                modal.find('[data-confirm-title]').html(option('title'));
                modal.find('[data-confirm-body]').html(option('body'));
                modal.find('[data-confirm-cancel]').html(option('cancel')).on('click', function (e) {
                    modal.foundation('reveal', 'close');
                    return $el.trigger('cancel.reveal', e);
                });
                modal.find('[data-confirm-footer]').append(confirm_button);
                if ((password === option('password'))) {
                    confirm_label = (option('prompt')).replace('%s', password);
                    confirm_html = "<label>\n  " + confirm_label + "\n  <input data-confirm-password type='text'/>\n</label>";
                    modal.find('[data-confirm-body]').after($(confirm_html));
                    modal.find('[data-confirm-password]').on('keyup', function (e) {
                        var disabled;
                        disabled = $(this).val() !== password;
                        return confirm_button.toggleClass('disabled', disabled).prop('disabled', disabled);
                    }).trigger('keyup');
                }
                modal.appendTo($('body')).foundation().foundation('reveal', 'open').on('closed.fndtn.reveal', function (e) {
                    return modal.remove();
                });
                return false;
            };
            if ($.rails) {
                $.rails.allowAction = function (link) {
                    return do_confirm($(link));
                };
                return $(this);
            }
            handler = function (e) {
                if (!(do_confirm($(this)))) {
                    e.preventDefault();
                    return e.stopImmediatePropagation();
                }
            };
            return this.each(function () {
                var $el;
                $el = $(this);
                $el.on('click', 'a[data-confirm], :input[data-confirm]', handler);
                $el.on('submit', 'form[data-confirm]', handler);
                return $el;
            });

        }
    });

}).call(this);


function nl2br(str, is_xhtml) {
    'use strict';
    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br ' + '/>' : '<br>'; // Adjust comment to avoid issue on phpjs.org display
    return (str + '')
        .replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
}

function revealAlert(str, btnval) {
    'use strict';
    var button = '<div class="row text-right"><button class="button" data-close>' + btnval + '</button></div>',
        modal = $('#malert');
    modal.empty().append('<div class="row text-center"><p><h4>' + str + '</h4></p></div>').append(button).foundation('open');
}


/*
 * Copyright (c) 2008 Greg Weber greg at gregweber.info
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * documentation at http://gregweber.info/projects/uitablefilter
 *
 * allows table rows to be filtered (made invisible)
 * <code>
 * t = $('table')
 * $.uiTableFilter( t, phrase )
 * </code>
 * arguments:
 *   jQuery object containing table rows
 *   phrase to search for
 *   optional arguments:
 *     column to limit search too (the column title in the table header)
 *     ifHidden - callback to execute if one or more elements was hidden
 */
jQuery.uiTableFilter = function (jq, phrase, column, ifHidden) {
    'use strict';
    var new_hidden = false, elems, index, phrase_length, last_phrase, words, matches, noMatch, getText;
    if (this.last_phrase === phrase) {
        return false;
    }
    phrase_length = phrase.length;
    words = phrase.toLowerCase().split(" ");

    // these function pointers may change
    matches = function (elem) {
        elem.show();
    };
    noMatch = function (elem) {
        elem.hide();
        new_hidden = true;
    };
    getText = function (elem) {
        return elem.text();
    };

    if (column) {
        index = null;
        jq.find("thead > tr:last > th").each(function (i) {
            if ($(this).text() === column) {
                index = i;
                return false;
            }
        });
        if (index === null) {
            throw ("given column: " + column + " not found");
        }


        getText = function (elem) {
            return jQuery(elem.find(
                ("td:eq(" + index + ")"))).text();
        };
    }

    // if added one letter to last time,
    // just check newest word and only need to hide
    if ((words.size > 1) && (phrase.substr(0, phrase_length - 1) ===
        this.last_phrase)) {

        if (phrase[-1] === " ") {
            this.last_phrase = phrase;
            return false;
        }

        words = words[-1]; // just search for the newest word

        // only hide visible rows
        matches = function (elem) {

        };
        elems = jq.find("tbody > tr:visible");
    } else {
        new_hidden = true;
        elems = jq.find("tbody > tr");
    }

    elems.each(function () {
        var elem = jQuery(this);
        jQuery.uiTableFilter.has_words(getText(elem), words, false) ? matches(elem) : noMatch(elem);
    });

    last_phrase = phrase;
    if (ifHidden && new_hidden) {
        ifHidden();
    }
    return jq;
};

// caching for speedup
jQuery.uiTableFilter.last_phrase = "";

// not jQuery dependent
// "" [""] -> Boolean
// "" [""] Boolean -> Boolean
jQuery.uiTableFilter.has_words = function (str, words, caseSensitive) {
    'use strict';
    var i, text = caseSensitive ? str : str.toLowerCase();
    for (i = 0; i < words.length; i++) {
        if (text.indexOf(words[i]) === -1) {
            return false;
        }
    }
    return true;
};


/// third party plugin //


////////////////
/// JAGGER /////
////////////////

Jagger.helperModal = $("#helpermodal");
Jagger.confirmFormModal = function (htmlObj) {
    htmlObj.foundation('open');
};
Jagger.genFormModal = function () {
    var strHtml = [];
    strHtml.push('<form>');

    strHtml.push('</form>');
};
Jagger.dictionary.en = {
    hello: "Hello",
    close: "Close",
    cancel: "Cancel",
    submit: "Submit",
    accept: "Accept",
    approve: "Approve",
    remove: "Remove",
    areyousure: "Are you sure",
    uwtremoveattr: "you want to remove attribute"
};
Jagger.getLangLine = function (key) {
    if (Jagger.dictionary[Jagger.lang] && Jagger.dictionary[Jagger.lang][key]) {
        return Jagger.dictionary[Jagger.lang][key];
    }
    return Jagger.dictionary.en[key];
}
var jlettersdigits = 'abcdefghijklmnopqrstuvwxyz0123456789';
var jLetters = 'abcdefghijklmnopqrstuvwxyz';
var jDigits = '0123456789';

var genRandomStr = function (counter) {
    'use strict';
    var randStr = '', i, limitLength = jlettersdigits.length;
    for (i = 0; i < counter; i++) {
        randStr += jlettersdigits.charAt(Math.floor(Math.random() * limitLength));
    }
    return randStr;
};

function go_to_private_page() {
    window.location.reload();
}


var map, mapSearchInput;

function mapInitialize() {

    window.console.log('map init');
    var markers = [];
    var mapOptions = {
        zoom: 4,
        center: new google.maps.LatLng(50.019036, 13.007813),
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControl: true,
        mapTypeControlOptions: {style: google.maps.MapTypeControlStyle.DEFAULT}
    };
    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    // var dymek = new google.maps.InfoWindow();
    google.maps.event.addListener(map, 'click', function (event) {
        //  dymek.setContent('Location :<br />' + event.latLng);
        $('#latlng').val(event.latLng.lat().toFixed(6) + ',' + event.latLng.lng().toFixed(6));
        //  dymek.setPosition(event.latLng);
        //  dymek.open(map);
    });

    mapSearchInput = (document.getElementById('map-search'));
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(mapSearchInput);
    var searchBox = new google.maps.places.SearchBox((mapSearchInput));
    google.maps.event.addListener(searchBox, 'places_changed', function () {

        var places = searchBox.getPlaces();
        if (places.length === 0) {
            return;
        }
        for (var i = 0, marker; marker = markers[i]; i++) {
            marker.setMap(null);
        }
        markers = [];
        var bounds = new google.maps.LatLngBounds();
        for (var j = 0, place; place = places[j]; j++) {
            var image = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            marker = new google.maps.Marker({
                map: map,
                icon: image,
                title: place.name,
                position: place.geometry.location
            });

            markers.push(marker);
            bounds.extend(place.geometry.location);
        }

        map.fitBounds(bounds);
        var listener = google.maps.event.addListener(map, "idle", function () {
            if (map.getZoom() > 16) {
                map.setZoom(16);
            }
            google.maps.event.removeListener(listener);
        });

    });
    google.maps.event.addListener(map, 'bounds_changed', function () {
        var bounds = map.getBounds();
        searchBox.setBounds(bounds);
    });

}


jQuery.fn.toggleOption = function (show) {

    jQuery(this).toggle(show);
    if (show) {
        while (jQuery(this).parent('span.toggleOption').length) {
            jQuery(this).unwrap();
        }
    } else {
        jQuery(this).wrap('<span class="toggleOption" style="display: none;" />');
    }
};

var createRowWithLangRm = function (langCode, langString, inputName, rmbtn) {
    console.log('createRowWithLangRm fired');
    return $('<div class=\"large-12 small-12 columns\"><div class=\"small-3 columns\"><label for=\"' + inputName + '\" class=\"right inline\">' + langString + '</label></div><div class=\"small-6 large-7 columns\"><input id=\"' + inputName + '\" name=\"' + inputName + '\" type=\"text\" class=\"validurl\"/></div><div class=\"small-3 large-2 columns\"> <button type=\"button\" class=\"btn langinputrm button inline  left alert\" name=\"langrm\" value=\"' + langCode + '\">' + rmbtn + '</button></div></div>');
};

var createRowTaskParams = function (label1, label2) {
    var rname = 'z';
    var possible = "0123456789";
    for (var i = 0; i < 5; i++) {
        rname += possible.charAt(Math.floor(Math.random() * possible.length));
    }

    return $('<div class=\"row\"><div class=\"small-6 column\"><label>' + label1 + '<input name=\"params[' + rname + '][name]\" type=\"text\" value=\"\"/></label></div>' +
        '<div class=\"small-6 column\"><label>' + label2 + '<input name=\"params[' + rname + '][value]\" type="text"  value=\"\"/></label></div></div>');
};


var spinImage = $('#spinner');


var BINIT = {
    initFvalidators: function () {

        console.log('BININT');


        $("ul.validatorbuttons button").on('click', function (e) {
            var link = $(this).attr("value");
            var fvform = $('#fvform');
            $.ajax({
                type: "GET",
                url: link,
                timeout: 2500,
                cache: true,
                dataType: "json",
                success: function (data) {
                    spinImage.hide();
                    if (data) {
                        var vfedid = data.fedid;
                        var fvalidid = data.id;
                        var fvalidname = data.name;
                        var fvaliddesc = data.desc;
                        fvform.find('input[name="fedid"]').first().val(vfedid);
                        fvform.find('input[name="fvid"]').first().val(fvalidid);
                        $("#fvalidesc").replaceWith('<div id="fvalidesc"><b>' + fvalidname + '</b><p>' + fvaliddesc + '</p></div>');
                        fvform.show();

                    }

                },
                beforeSend: function () {
                    $("#fvresult").hide();

                },
                error: function () {
                    spinImage.hide();
                    fvform.hide();
                    $('#fvresult').hide();
                }


            });
        });

    }
};

var GINIT = {
    initialize: function () {
        "use strict";


        var pJagger = $(".pjagger");
        if (pJagger.length > 0) {
            var pElement;
            var srclink;
            pJagger.each(function () {
                pElement = $(this);
                if (pElement.hasClass('piegraph') && pElement.hasClass('fedgraph')) {
                    srclink = pElement.attr('data-jagger-link');
                    var entgroups = ['idp', 'sp', 'both'];
                    var entgroupkey;
                    var countGroups = [];
                    countGroups.idp = 0;
                    countGroups.sp = 0;
                    countGroups.both = 0;
                    $.ajax({
                        url: srclink,
                        type: 'GET',
                        cache: true,
                        dataType: 'json',
                        success: function (data) {
                            if (data) {
                                var data2 = [
                                    {
                                        value: data.idp,
                                        color: "#F7464A",
                                        highlight: "#FF5A5E",
                                        label: data.definitions.idp
                                    },
                                    {
                                        value: data.sp,
                                        color: "#46BFBD",
                                        highlight: "#5AD3D1",
                                        label: data.definitions.sp
                                    },
                                    {
                                        value: data.both,
                                        color: "#FDB45C",
                                        highlight: "#FFC870",
                                        label: data.definitions.both
                                    }
                                ];
                                var ctx = pElement.find('canvas').get(0).getContext("2d");

                                if (ctx) {
                                    var myPieChart = new Chart(ctx).Pie(data2, {
                                        responsive: true,
                                        legendTemplate: "<div class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><div><span style=\"background-color:<%=segments[i].fillColor%>\">&nbsp;&nbsp;&nbsp;</span> <%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></div>"
                                    });
                                    var legend = myPieChart.generateLegend();
                                    pElement.find('div.plegend').first().html(legend);
                                }
                            }
                        }
                    });
                }
            });
        }
        var membership2 = $("#membership2").first();
        if (membership2 !== undefined && membership2.length > 0) {
            var link = $(membership2).attr('data-jagger-link');
            var entgroups = ['idp', 'sp', 'both'];
            var entgroupkey;
            var countGroups = [];
            countGroups.idp = 0;
            countGroups.sp = 0;
            countGroups.both = 0;
            $.ajax({
                url: link,
                type: 'GET',
                cache: true,
                dataType: 'json',
                success: function (data) {
                    if (data) {

                        var preurl = data.definitions.preurl;
                        var out = [], o = -1;
                        var nr, oddeven;
                        /// accordion
                        out[++o] = '<h7 class="subheader">List of currently registered entities</h7>';
                        out[++o] = '<ul class="accordion" data-allow-all-closed="true" data-multi-expand="true" data-accordion>';

                        for (var i = 0, total = entgroups.length; i < total; i++) {
                            entgroupkey = entgroups[i];

                            if (data[entgroupkey]) {
                                countGroups[entgroupkey] = data[entgroupkey].length;
                                out[++o] = '<li class="accordion-item " data-accordion-item>';
                                out[++o] = '<a href="#" class="accordion-title">' + data.definitions[entgroupkey] + ' (' + countGroups[entgroupkey] + ')</a> ';
                                out[++o] = '<div class="accordion-content" data-tab-content>'
                                out[++o] = '<table><tbody>';
                                out[++o] = '<tr><td colspan="2"><div class="zebramembers">';
                                nr = 0;

                                var entstate;
                                $.each(data[entgroupkey], function (i, v) {
                                    entstate = '';

                                    if (v.penabled === false) {
                                        entstate = entstate + '<span class="label alert">disabled</span> ';
                                    }
                                    if (v.mdisabled === 1 || v.mbanned === 1) {
                                        entstate = entstate + '<span class="label alert">membership suspended</span> ';
                                    }
                                    ++nr;

                                    if (nr % 2) {
                                        out[++o] = '<div class="small-12 column odd">';
                                    }
                                    else {
                                        out[++o] = '<div class="small-12 column even">';
                                    }

                                    out[++o] = '<div class="large-5 column">' + nr + '. <a href="' + preurl + v.pid + '">' + v.pname + '</a></div>';
                                    out[++o] = '<div class="large-5 column">' + v.entityid + '</div>';
                                    out[++o] = '<div class="large-2 column">' + entstate + '</div>';

                                    out[++o] = '</div>';

                                });
                                out[++o] = '</div></td></tr>';
                                out[++o] = '</tbody></table>';

                                out[++o] = '</div>';
                                out[++o] = '</li>';

                            }

                        }

                        out[++o] = '</ul>';
                        if (!membership2.hasClass('fake')) {
                            $(membership2).html(out.join('')).foundation();
                        }

                        var data2 = [
                            {
                                value: countGroups.idp,
                                color: "#F7464A",
                                highlight: "#FF5A5E",
                                label: data.definitions.idp
                            },
                            {
                                value: countGroups.sp,
                                color: "#46BFBD",
                                highlight: "#5AD3D1",
                                label: data.definitions.sp
                            },
                            {
                                value: countGroups.both,
                                color: "#FDB45C",
                                highlight: "#FFC870",
                                label: data.definitions.both
                            }
                        ];


                        var ctx = document.getElementById("fedpiechart").getContext("2d");
                        if (ctx && (countGroups.idp > 0 || countGroups.sp > 0 || countGroups.both > 0)) {
                            var myPieChart = new Chart(ctx).Pie(data2, {
                                responsive: true,
                                legendTemplate: "<div class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><div><span style=\"background-color:<%=segments[i].fillColor%>\">&nbsp;<%=segments[i].value %>&nbsp;</span> <%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></div>"
                            });
                            var legend = myPieChart.generateLegend();
                            $("#fedpiechartlegend").html(legend);
                        }


                    }
                }
            });
        }
        $('div[data-jagger-getmoreajax]').each(function (e) {
            var link = $(this).attr('data-jagger-getmoreajax');
            var targetresponseid = $(this).attr('data-jagger-response-msg');
            var refreshbtn = $(this).attr('data-jagger-refreshurl');
            var refreshbutton = '';
            if (targetresponseid === undefined || targetresponseid === null) {
                console.log('attribute data-jagger-response-msg not found in element with data-jagger-getmoreajax="' + link + '" - exiting');
                return false;
            }
            else {
                console.log('attribute data-jagger-response-msg="' + targetresponseid + '" in element data-jagger-getmoreajax="' + link + '"');
            }
            var targetelement = $("div#" + targetresponseid);
            if (targetelement === undefined || targetelement === null || $(targetelement).length === 0) {
                console.log('div with id="' + targetresponseid + '" not found');

                return false;
            }
            else {
                console.log('div with id="' + targetresponseid + '" found');

            }

            $.ajax({
                dataType: "json",
                type: "GET",
                url: link,
                cache: true,
                success: function (data) {
                    if (!data) {
                        console.log('no json got from ' + link);
                        return false;
                    }
                    var countresult = data.length;
                    if (countresult < 1) {
                        return false;
                    }
                    var result = $('<div/>');

                    var div_data;
                    $.each(data, function (i, v) {
                        div_data = '<div>' + v.msg + '</div>';
                        result.append(div_data);
                    });
                    if (refreshbtn !== null) {
                        refreshbutton = '<a class="refreshurl float-right" href="#"  data-jagger-getmoreajaxonclick= "' + refreshbtn + '" data-jagger-response-msg="prdetails"><i class="fa fa-refresh" ></i></a>';
                    }
                    targetelement.empty().append(refreshbutton).append(result).show();


                }
            });

        });


        $("#taskformaddparam").on('click', function (e) {
            var currentRow = $(this).closest('div.row');
            var row = createRowTaskParams('', '');
            row.insertBefore(currentRow);
            return false;

        });
        $("#password").on('keypress', function (e) {
            var kc = e.keyCode ? e.keyCode : e.which;
            var sk = e.shiftKey ? e.shiftKey : (kc === 16);
            if (((kc >= 65 && kc <= 90) && !sk) || ((kc >= 97 && kc <= 122) && sk)) {
                $("#capswarn").show();
            }
            else {
                $("#capswarn").hide();
            }
        });

        $("table.sortable").tablesorter();

        var baseurl = $("[name='baseurl']").val();
        if (baseurl === undefined) {
            baseurl = '';
        }


        $("#loginbtn").on('click', function (event) {
            var url = $(this).attr('data-jagger-link');
            var loginform = $("#loginform");
            var submitbutton = $(loginform).find(":submit").first();
            var usernamerow = $(loginform).find("div.usernamerow").first();
            var passwordrow = $(loginform).find("div.passwordrow").first();
            var secondfactorrow = $(loginform).find("div.secondfactorrow").first();
            var loginresponse = $("#loginresponse");
            $.ajax({
                type: "GET",
                url: url,
                dataType: "json",
                cache: false,
                success: function (data) {
                    if (data.logged !== 1) {
                        if (data.partiallogged === 0) {
                            submitbutton.prop('disabled', false);
                            usernamerow.show();
                            passwordrow.show();
                            loginresponse.hide();
                            loginform.foundation('open');
                            return false;
                        }
                        if (data.twofactor === 1 && data.secondfactor !== null) {
                            submitbutton.prop('disabled', true);
                            usernamerow.show();
                            $("#password").val(null);
                            passwordrow.show();
                            loginresponse.hide();
                            if (data.html) {
                                secondfactorrow.html(data.html).show();
                            }
                            loginform.foundation('open');
                            return false;
                        }
                    }
                    else {
                        var baseurl = $("[name='baseurl']").val();
                        if (baseurl !== undefined) {
                            window.location.href = baseurl;
                        }
                    }
                    usernamerow.show();
                    passwordrow.show();
                    loginresponse.hide();
                    loginform.foundation('open');
                }
            });


            return false;
        });

        $(document).on('click', '.modal-close', function (event) {
            $(this).foundation('reveal', 'close');
        });

        $('#providerdetail-tabs[data-tabs]').on('change.zf.tabs', function (e) {
            console.log('Those tabs sure did change!');
            var tabActive = $('div[data-tabs-content="' + $(this).attr('id') + '"]').children('.tabs-panel.is-active');
            var ajaxTab = tabActive.attr('data-reveal-ajax-tab');
            if (ajaxTab !== undefined) {
                $.ajax({
                    cache: true,
                    type: 'GET',
                    url: ajaxTab,
                    success: function (response) {
                        var data;
                        try {
                            JSON.parse(response);
                        }
                        catch (e) {
                            tabActive.empty().append(response);
                        }
                        tabActive.foundation();
                        return false;

                    }
                });
            }

        });


        $("#newusermodal").on('submit', 'form', function (e) {
            e.preventDefault();
            var modal = $(this);
            var url = modal.attr('action');
            var msgdiv = modal.find('div.message').first();
            $.ajax({
                url: url,
                type: "POST",
                data: modal.serializeArray(),
                beforeSend: function () {
                    msgdiv.hide().empty();
                },
                success: function (data) {
                    if (data && data.trim() === 'OK') {
                        $("#newusermodal").foundation('close');
                        msgdiv.hide().empty();
                        location.reload();

                    }
                    else {
                        msgdiv.html(data).show();
                    }
                }
            });

        });

        $(".cleartarget").on('click', function (e) {

            e.preventDefault();
            var targetname1 = $(this).attr('data-jagger-textarea');
            var targetname2 = $(this).attr('data-jagger-input');
            if (targetname1 !== undefined) {
                $("textarea[name='" + targetname1 + "']").val('');
            }
            if (targetname2 !== undefined) {
                $("input[name='" + targetname2 + "']").val('');
            }
            return false;
        });

        $(".postajax").on('click', function (e) {
            e.preventDefault();
            var form = $(this).closest("form");
            var targetresponseid = $(this).attr('data-jagger-response-msg');
            var targetelement = $("div#" + targetresponseid);
            var url = form.attr('action');

            $.ajax({
                    type: "POST",
                    url: url,
                    data: form.serializeArray(),
                    beforeSend: function () {
                        targetelement.empty();
                    },
                    success: function (data) {
                        if (data) {
                            targetelement.append(data);
                        }
                        else {
                            targetelement.append('no result');
                        }
                    },
                    error: function (xhr, status, error) {
                        var alertmsg = '<div>' + error + '</div>';

                        targetelement.append(alertmsg);
                        return false;
                    }

                }
            );

            return false;
        });

        $(".policymembers").on('click', function (e) {
            var link = $(this).attr('data-jagger-jsource');
            var modal = $('#regpolmembers');
            var content = modal.find(".datacontent").first();
            $.ajax({
                type: "GET",
                url: link,
                beforeSend: function () {
                    content.empty();
                },
                success: function (data) {
                    if (data) {
                        var listbody = $('<ul/>');
                        listbody.addClass('no-bullet');
                        var result = [];
                        var a = 0;
                        $.each(data, function (i, v) {
                            result[a++] = '<li><a href="' + baseurl + 'providers/detail/show/' + v.provid + '">' + v.name + ' </a><small>(' + v.entityid + ')</small></li>';
                        });
                        listbody.append(result.join(''));
                        content.append(listbody);
                        modal.foundation('open');
                    }
                }

            });
        });
        $(document).on('click', '.ecmembers', function (e) {
            var link = $(this).attr('data-jagger-jsource');
            var modal = $('#ecmembers');
            var content = modal.find(".datacontent").first();
            $.ajax({
                type: "GET",
                url: link,
                beforeSend: function () {
                    content.empty();
                },
                success: function (data) {
                    if (data) {
                        var listbody = $('<ul/>');
                        listbody.addClass('no-bullet');
                        var result = [];
                        var a = 0;
                        $.each(data, function (i, v) {
                            result[a++] = '<li><a href="' + baseurl + 'providers/detail/show/' + v.provid + '">' + v.name + ' </a><small>(' + v.entityid + ')</small></li>';
                        });
                        listbody.append(result.join(''));
                        content.append(listbody);
                        modal.foundation('open');
                    }
                }

            });
        });

        $(".rmusericon").on('click', function (e) {
            var modal = $("#removeusermodal");
            var msgdiv = modal.find("#removeusermodalmsg").first();
            var username = $(this).attr('data-jagger-username');
            var encusername = $(this).attr('data-jagger-encodeduser');
            var usernameval = modal.find('#usernameval').first();
            var inputencusr = modal.find('#encodedusr').first();
            var closebtn = modal.find("button[name='close']");
            var cancelbtn = modal.find("button[name='cancel']");
            var submitbtn = modal.find("button[name='remove']");
            var inputusername = modal.find("input[name='username']");
            inputusername.val('');
            inputencusr.val(encusername);
            usernameval.html(username);
            msgdiv.html('').hide().removeClass('alert').removeClass('success');
            submitbtn.show();
            cancelbtn.show();
            closebtn.hide();


            modal.foundation('open');
            return false;
        });


        $("#removeusermodal").on('submit', function (e) {
            e.preventDefault();
            var tmodal = $(this);
            var tform = tmodal.find('form').first();
            var tdata = tform.serializeArray();
            var msgdiv = tmodal.find("#removeusermodalmsg").first();
            var inputencusr = tmodal.find('#encodedusr').first();
            var link = tform.attr('action');
            var closebtn = tmodal.find("button[name='close']");
            var cancelbtn = tmodal.find("button[name='cancel']");
            var submitbtn = tmodal.find("button[name='remove']");
            $.ajax({
                    type: "POST",
                    url: link,
                    data: tdata,
                    beforeSend: function () {
                        msgdiv.html('').hide().removeClass('alert').removeClass('success');
                        submitbtn.show();
                        cancelbtn.show();
                        closebtn.hide();
                    },
                    success: function (d) {
                        var cell = $(document).find('a[data-jagger-encodeduser="' + inputencusr.val() + '"]');
                        if (cell) {

                            cell.closest('tr').hide();

                        }

                        msgdiv.html(d).addClass('success').show();
                        submitbtn.hide();
                        cancelbtn.hide();
                        closebtn.show();
                        return false;
                    },
                    error: function (xhr, status, error) {
                        var alertmsg = '' + error + '';
                        msgdiv.html(xhr.responseText).addClass('alert').show();
                        return false;
                    }
                }
            );
        });

        $("#confirmremover").on('click', '.yes', function (e) {
            e.preventDefault();
            var form = $(this).closest("form");
            var actionUrl = form.attr('action');
            var regid = form.attr('data-jagger-regpolicy');
            var ecid = form.attr('data-jagger-ec');
            $.ajax({
                type: "POST",
                url: actionUrl,
                data: form.serializeArray(),
                success: function (data) {
                    if (regid !== undefined && regid !== null) {
                        $('a[data-jagger-regpolicy="' + regid + '"]').closest('tr').hide();
                    }
                    else {
                        $('a[data-jagger-ec="' + ecid + '"]').closest('tr').hide();
                    }
                    $("#confirmremover").foundation('close');
                },
                error: function (xhr, status, error) {
                    var alertmsg = '' + error + '';
                    window.alert(alertmsg);
                    return false;
                }
            });

        });
        $("a.withconfirm").on('click', function (e) {

            e.preventDefault();
            var url = $(this).attr('href');
            var regid = $(this).attr('data-jagger-regpolicy');
            var ecid = $(this).attr('data-jagger-ec');
            var providersCounter = $(this).attr('data-jagger-counter');
            var fieldname = $(this).attr('data-jagger-fieldname');
            if (url === undefined) {
                return false;
            }
            var formremover = $("#confirmremover");
            var datafieldname = formremover.find('span.data-fieldname').first();
            var datacounter = formremover.find('span.data-counter').first();
            datafieldname.html(fieldname);
            datacounter.html(providersCounter);
            var form = formremover.find('form').first();
            form.attr('action', url);
            if (ecid !== undefined && ecid !== null) {
                form.attr('data-jagger-ec', ecid);
            }
            else {
                form.attr('data-jagger-regpolicy', regid);
            }
            formremover.foundation('open');

        });

        $(".dhelp").click(function () {
            var curSize = parseInt($(this).css('font-size'));
            if (curSize <= 10) {
                $(this).css('font-size', curSize + 5).removeClass('zoomin').addClass('zoomout');
            }
            else {
                $(this).css('font-size', curSize - 5).removeClass('zoomout').addClass('zoomin');
            }
        });
        $("form#availablelogos input[name='filename']").click(function () {
            $(this).after($("form#availablelogos div.buttons").show());

        });


        $("button.reqattrrm").click(function () {
            var fieldset = $(this).closest('fieldset');
            fieldset.remove();
        });

        $('form#availablelogos').on('submit', function (e) {
            e.preventDefault();
            var result = $("div.uploadresult");
            var assignedGrid = $("div.assignedlogosgrid").text();
            $('#uploadlogo').unbind();
            $.ajax({
                type: 'POST',
                url: $(this).attr('action'),
                data: $("form#availablelogos").serializeArray(),
                dataType: 'html',
                cache: false,
                beforeSend: function () {
                    $('form#availablelogos div.buttons').hide().appendTo('form#availablelogos');
                },
                success: function (data) {

                    $('form#availablelogos #filename').prop('checked', false);
                    $.ajax({
                        type: 'GET',
                        url: assignedGrid,
                        cache: false,
                        success: function (data) {
                            $('#uploadlogo').unbind();
                            $("div#t1").empty().append(data);

                            $("#assignedlogos").unbind();
                            $("#availablelogos").unbind();
                            GINIT.initialize();
                        }
                    });
                    spinImage.hide();
                    revealAlert(data, 'OK');


                },
                error: function (jqXHR, textStatus, errorThrown) {
                    spinImage.hide();
                    result.css('color', 'red');
                    revealAlert('<div data-alert class="alert-box alert">' + jqXHR.responseText + '</div>', 'OK');
                }

            });

        });
        $('#uploadlogo').on('submit', (function (e) {
            e.preventDefault();
            var formData = new FormData(document.forms.namedItem("uploadlogo"));
            var result = $("div.uploadresult");
            var gridUrl = $("div.availablelogosgrid").text();
            var gridUrl2 = $("div.assignedlogosgrid").text();
            $.ajax({
                type: 'POST',
                url: $(this).attr('action'),
                data: formData,
                dataType: 'html',
                cache: false,
                processData: false,
                contentType: false,
                beforeSend: function () {
                    result.html('');
                    result.css('color', 'black');
                    $("form#availablelogos div.buttons").hide().appendTo("form#availablelogos");

                    spinImage.show();
                },
                success: function (data1) {
                    spinImage.hide();
                    result.html(data1);
                    revealAlert($('div.uploadresult').text(), 'OK');
                    $.ajax({
                        type: 'GET',
                        url: gridUrl2,
                        cache: false,
                        success: function (data3) {
                            var assignedLogos = $("form#assignedlogos");
                            assignedLogos.replaceWith(data3);
                            $('#availablelogos').unbind();
                            assignedLogos.unbind();
                            $('#uploadlogo').unbind();
                            $("table#details").unbind();
                            $("form#availablelogos input[name='filename']").unbind("click");
                            GINIT.initialize();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            spinImage.hide();
                            $('#availablelogos').unbind();
                            $('#assignedlogos').unbind();
                            $('#uploadlogo').unbind();
                            $("table#details").unbind();
                            $("form#availablelogos input[name='filename']").unbind("click");
                            GINIT.initialize();
                        }

                    });
                    $.ajax({
                        type: 'GET',
                        url: gridUrl,
                        cache: false,
                        success: function (data2) {
                            $("form#availablelogos").replaceWith(data2).unbind();
                            $('form#assignedlogos').unbind();
                            $('#uploadlogo').unbind();
                            $("table#details").unbind();
                            $("form#availablelogos input[name='filename']").unbind("click");
                            GINIT.initialize();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            spinImage.hide();
                            $('#availablelogos').unbind();
                            $('#uploadlogo').unbind();
                            $("table#details").unbind();
                            $("form#availablelogos input[name='filename']").off('click');
                            revealAlert('<div data-alert class="alert-box alert">' + jqXHR.responseText + '</div>', 'OK');
                            GINIT.initialize();
                        }
                    });

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    spinImage.hide();
                    revealAlert('<div data-alert class="alert-box alert">' + jqXHR.responseText + '</div>', 'OK');

                }
            }).done(function () {
                //  $('#availablelogos').unbind();
                //  $("table#details").unbind();
                //       $('#uploadlogo').unbind();
                //  GINIT.initialize();

            });
        }));

        //   $("fieldset#general label").autoWidth();
        $("li.fromprevtoright").each(function () {
            var prevli = $(this).prev();
            var prevliOffset = prevli.offset().left;
            var previnput = $(this).prev().find("input,textarea").last();
            var previnputOffset = previnput.offset().left;
            var previnputWidth = previnput.width();
            var ln = (previnputOffset + previnputWidth) - prevliOffset;
            $(this).css('text-align', 'right').width(ln);
        });


        $("form#assignedlogos input[name='logoid']").click(function () {
            $(this).after($("div#unsignlogosbtn").show());


        });
        $("form#applyforaccount").on('submit', function (e) {
            e.preventDefault();
            var result = $("div.result");
            var postdata = $("form#applyforaccount").serializeArray();
            $.ajax({
                type: 'POST',
                url: $(this).attr('action'),
                data: postdata,
                dataType: 'html',
                cache: false,
                beforeSend: function () {
                    result.html('');
                    spinImage.show();
                },
                success: function (data) {
                    spinImage.hide();
                    result.html(data);
                    $("form#applyforaccount").remove();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    spinImage.hide();
                    result.html(jqXHR.responseText);
                    result.css('color', 'red');
                    $("form#applyforaccount").remove();
                }

            });

        });
        $("form#assignedlogos").on('submit', (function (e) {
            e.preventDefault();
            var result = $("div.uploadresult");
            var postdata = $("form#assignedlogos").serializeArray();
            var checkedObj = $('input[name=logoid]:radio:checked');
            var messagereveal = $('#messagereveal');
            var infomsg = messagereveal.find("p.infomsg");
            $.ajax({
                type: 'POST',
                url: $(this).attr('action'),
                data: postdata,
                dataType: 'html',
                cache: false,
                beforeSend: function () {
                    $("div#unsignlogosbtn").hide().appendTo("form#assignedlogos");
                    result.html('');
                    spinImage.show();
                },
                success: function (data) {
                    spinImage.hide();
                    infomsg.html(data);
                    messagereveal.foundation('open');
                    checkedObj.parent().remove();

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    spinImage.hide();
                    infomsg.html(jqXHR.responseText);
                    messagereveal.foundation('open');

                }
            });

        }));
        $(".updatenotifactionstatus").click(function (e) {
            e.preventDefault();
            var notificationupdateform = $("#notificationupdateform");
            var related;
            var notid = $(this).attr('value');
            var ctbl = $(this).closest("tbody");
            var ctr = $(this).closest("tr");
            var subsriptionstatus = ctr.find('div.subscrstatus:first');
            var posturl = baseurl + 'notifications/subscriber/updatestatus/' + notid;
            notificationupdateform.attr('action', posturl);
            notificationupdateform.find("#noteid").first().val(notid);


        });


        $('#fvform').submit(function (e) {
            e.preventDefault();
            var fvform = $(this);
            var str = fvform.serializeArray();
            var url = fvform.attr('action');
            var fvid = fvform.find("button:focus").attr('id');

            $.ajax({
                type: "POST",
                url: url,
                cache: false,
                data: str,
                dataType: "json",
                timeout: 120000,
                success: function (data) {
                    spinImage.hide();
                    if (!data) {
                        alert('no data received from upstream server');
                    }
                    else {
                        if (data.returncode) {
                            $("#fvreturncode").append(data.returncode);
                            $("#fvresult").show();
                        }
                        if (data.returncode === "success") {
                            fvform.find("button:focus").css("background-color", "#00aa00");
                            fvform.find("button:focus").data("passed", "true");
                            fvform.find("button:focus").attr("disabled", "true");
                        } else if (data.returncode === "error") {
                            fvform.find("button:focus").css("background-color", "#aa0000");
                            fvform.find("button:focus").data("passed", "false");
                        }
                        if (data.message) {
                            var msgdata;
                            $.each(data.message, function (i, v) {
                                $.each(v, function (j, m) {
                                    msgdata = '<div>' + i + ': ' + m + '</div>';
                                    $("#fvmessages").append(msgdata);
                                });
                            });

                        }

                    }
                },
                beforeSend: function () {
                    $("#fvreturncode").text('');
                    $("#fvmessages").text('');
                    spinImage.show();
                },
                error: function (x, t, m) {
                    spinImage.hide();
                    if (t === 'timeout') {
                        revealAlert('got timeout from validation server', 'Close');
                    }
                    else {
                        revealAlert('unknown problem with receiving data', 'Close');
                    }
                }
            });

            //return false;
        });

        $("#rejectqueue").on('submit', function (e) {
            var serializedData = $(this).serializeArray();
            var posturl = $(this).attr('action');
            $.ajax({
                type: "POST",
                url: posturl,
                data: serializedData,
                dataType: "json",
                success: function (data) {
                    if (data) {
                        alert(data.message);
                        window.location.href = baseurl;
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    window.alert('Error occured: ' + errorThrown);
                }
            });
            return false;
        });

        $("#approvequeue").submit(function (e) {
            var result = 0;
            var validators = 0;

            $("button[name='mandatory']").each(function (i) {
                if ($(this).data("passed") === "true") {
                    result += 1;
                }

                validators += 1;
            });

            if (validators !== result) {
                revealAlert('All mandatory validations have to pass successfully!', 'Close');
                return false;
            }
        });


        $(document).on('click', '.fmembers', 'a', function () {


            var link = $(this), url = link.attr("href");
            var iconlink = link.find('i').first();
            var row = link.parent().parent();
            if ($(row).hasClass('opened') === true) {
                $(row).next().remove();
                $(row).removeClass('opened').removeClass('highlight');
                link.removeClass('is-active');
            }
            else {
                var value = $('<ul/>');

                $.ajax({
                    url: url,
                    timeout: 9500,
                    cache: true,
                    success: function (data) {
                        link.addClass('is-active');
                        spinImage.hide();
                        var stitle;
                        var nlist;
                        var div_data;
                        $(row).addClass('opened').addClass('highlight');
                        if (!data) {
                            revealAlert('No data', 'Close');
                        }
                        else {
                            if (!data.idp && !data.sp && !data.both) {
                                div_data = '<div>' + data.definitions.nomembers + '</div>';
                                value.append(div_data);
                            }
                            else {
                                var preurl = data.definitions.preurl;
                                if (data.idp) {
                                    stitle = $('<div>' + data.definitions.idp + '</div>');
                                    nlist = $('<ol/>');
                                    $.each(data.idp, function (i, v) {
                                        div_data = '<li class="homeorg"><a href="' + preurl + v.pid + '">' + v.pname + '</a> (' + v.entityid + ') </li>';
                                        nlist.append(div_data);
                                    });
                                    stitle.append(nlist);
                                    value.append(stitle);
                                }
                                if (data.sp) {
                                    stitle = $('<div>' + data.definitions.sp + '</div>');
                                    nlist = $('<ol/>');
                                    $.each(data.sp, function (i, v) {
                                        div_data = '<li class="resource"><a href="' + preurl + v.pid + '">' + v.pname + '</a> (' + v.entityid + ') </li>';
                                        nlist.append(div_data);
                                    });
                                    stitle.append(nlist);
                                    value.append(stitle);
                                }
                                if (data.both) {
                                    stitle = $('<div>' + data.definitions.both + '</div>');
                                    nlist = $('<ol/>');
                                    $.each(data.both, function (i, v) {
                                        div_data = '<li class="both"><a href="' + preurl + v.pid + '">' + v.pname + '</a> (' + v.entityid + ') </li>';
                                        nlist.append(div_data);
                                    });
                                    stitle.append(nlist);
                                    value.append(stitle);
                                }
                            }
                        }


                    },
                    beforeSend: function () {
                        spinImage.show();
                    },
                    error: function () {
                        spinImage.hide();
                        revealAlert('problem with loading data', 'Close');
                    }
                }).done(function () {
                        var nextrow = '<tr class="feddetails"><td colspan="7"><ul class="feddetails">' + value.html() + '</ul></td></tr>';
                        $(nextrow).insertAfter(row);
                    }
                );
            }

            return false;


        });
        $("#getmembers").click(function () {
            var link = $(this), url = link.attr("href");
            var value = $('<ul/>');

            $.ajax({
                url: url,
                timeout: 22500,
                cache: true,
                dataType: "json",
                success: function (data) {
                    spinImage.hide();
                    if (!data) {
                        revealAlert('No data', 'Close');
                        return false;
                    }
                    var nlist = '<div class="zebralist row" style="list-style-type : decimal" >';

                    var div_data;
                    var n = 1;
                    var counter = 1;
                    var spanb;
                    var span_feds;
                    $.each(data, function (i, v) {
                        span_feds = '<span>';
                        spanb = '';
                        $.each(v.feds, function (x, z) {
                            spanb += '<span class="label">' + z + '</span>&nbsp;';
                        });
                        span_feds += spanb;
                        span_feds += '</span>';
                        div_data = '<div class="large-12 columns" style="margin-top: 2px; margin-bottom: 2px"><div class="large-9 columns">' + counter + '. <a href="' + v.url + '">' + v.name + '</a> <i> (' + v.entityid + ') </i></div><div class="fedlbl large-3 end text-right columns">' + span_feds + '</div></div>';
                        nlist += div_data;
                        n = n + 1;
                        counter = counter + 1;
                    });
                    nlist += '</div>';
                    value.append(nlist);


                },
                beforeSend: function () {
                    spinImage.show();
                },
                error: function () {
                    spinImage.hide();
                    revealAlert('problem with loading data', 'Close');
                }
            }).done(function () {
                var nextrow = value.html();
                $("#membership").replaceWith(nextrow);

            });
            return false;
        });
        $('.accordionButton').addClass('off').mouseover(function () {
            $(this).addClass('over');
        }).mouseout(function () {
            $(this).removeClass('over');
        }).click(function () {
            //REMOVE THE ON CLASS FROM ALL BUTTONS
            $(this).removeClass('on').addClass('off');
            //NO MATTER WHAT WE CLOSE ALL OPEN SLIDES
            $('.accordionContent').slideUp('fast');

            //IF THE NEXT SLIDE WASN'T OPEN THEN OPEN IT
            if ($(this).next().is(':hidden') === true) {

                //ADD THE ON CLASS TO THE BUTTON
                $(this).addClass('on');
                $(this).removeClass('off');


                //OPEN THE SLIDE
                $(this).next().slideDown('fast');
            }

        });

        $('.accordionContent').hide();
    }

};


$(document).ready(function () {
    $('fieldset').addClass('fieldset');
    $('pre code').each(function (i, block) {
        hljs.highlightBlock(block);
    });

    $(window).scroll(function () {
        if ($(this).scrollTop() >= 100) {
            $('#return-to-top').fadeIn(200);
        } else {
            $('#return-to-top').fadeOut(200);
        }
    });
    $('#return-to-top').click(function () {
        $('body,html').animate({
            scrollTop: 0
        }, 400);
    });

    GINIT.initialize();
//


    var accessmngmtDiv = $('#accessmngmt');
    var accessmngmtForm;
    if (accessmngmtDiv.length) {
        accessmngmtForm = accessmngmtDiv.closest('form');
        var dataLink = accessmngmtDiv.attr('data-jagger-jsource');

        $.ajax({
            type: 'GET',
            url: dataLink,
            dataTypa: 'json',
            beforeSend: function () {
                spinImage.show();
            },
            success: function (json) {
                var administrator = json.definitions.admin;
                var dictAllow = json.definitions.dictionary.allow;
                var dictDeny = json.definitions.dictionary.deny;
                var dictHasAccess = json.definitions.dictionary.hasaccess;
                var dictHasNoAccess = json.definitions.dictionary.hasnoaccess;
                var dictUsername = json.definitions.dictionary.username;
                var dictIsAdmin = 'Administrator';
                var dictIsYou = 'You';
                spinImage.hide();
                var tbl = [];
                tbl.push('<table><thead><tr><th>' + dictUsername + '</th>');
                $.each(json.definitions.actions, function (a, action) {
                    tbl.push('<th>' + action + '</th>');
                });
                tbl.push('</tr></thead>');
                tbl.push('<tbody>');

                $.each(json.data, function (k, d) {
                    tbl.push('<tr><td>');

                    var addLabel = '';
                    var disableBtn = '';
                    var disableBtnClass = '';
                    if (d.isyou === true) {
                        addLabel = addLabel + ' <span class="label warning">' + dictIsYou + '</span>';
                        disableBtn = ' disabled="disabled" ';
                    }
                    if (d.isadmin === true) {
                        addLabel = addLabel + ' <span class="label">' + dictIsAdmin + '</span>';
                    }
                    tbl.push('' + k + ' (' + d.fullname + ')' + addLabel + '');


                    tbl.push('</td>');
                    $.each(json.definitions.actions, function (a, action) {
                        disableBtnClass = '';
                        if (d.isadmin === true) {
                            tbl.push('<td>' + dictHasAccess + '</td>');
                        }
                        else {
                            if (action === 'approve' && administrator !== true) {
                                disableBtn = ' disabled="disabled" ';
                                disableBtnClass = 'secondary';

                            }
                            if (d.perms[action] === true) {
                                tbl.push('<td>' + dictHasAccess + ' <div><button ' + disableBtn + ' class="button small alert ' + disableBtnClass + '" value="' + k + '$|$' + action + '$|$deny" name="changeaccess" type="submit" >' + dictDeny + '</button></div></td>');
                            }
                            else {
                                tbl.push('<td>' + dictHasNoAccess + ' <div><button ' + disableBtn + ' class="button small ' + disableBtnClass + '" value="' + k + '$|$' + action + '$|$allow" name="changeaccess" type="submit">' + dictAllow + '</button></div></td>');
                            }
                        }
                    });

                    tbl.push('</tr>');
                });

                tbl.push('</tbody>');
                tbl.push('</table>');

                var tblHtml = tbl.join('');
                accessmngmtDiv.html(tblHtml);

            },
            error: function (xhr, status, error) {
                spinImage.hide();
                revealAlert(xhr.responseText, 'Close');
            }
        });


        accessmngmtForm.on('click', 'button', function (e) {
            //   e.preventDefault();
            var clickedBtn = $(this);
            var serializedData = accessmngmtForm.serializeArray();
            serializedData.push({
                name: clickedBtn.attr('name'),
                value: clickedBtn.val()
            });
            console.log(serializedData);
            $.ajax({
                method: 'POST',
                data: serializedData,
                url: accessmngmtForm.attr('action'),
                success: function (result) {
                    window.location.href = window.location.href;
                },
                error: function (xhr, status, error) {
                }


            });
            return false;
        });


    }


// idp/sp editform
    var latlngVal = /^-?([0-8]?[0-9]|90)\.[0-9]{1,6},-?((1?[0-7]?|[0-9]?)[0-9]|180)\.[0-9]{1,6}$/;
    var providerEditForm = $('#providereditform');
    if (providerEditForm.length) {

        var tabMap = $("#uihints");

        var addGeoBtn = $("#addlatlng");
        var markers = [];
        var gMarkers = [];

        var mapCanvas = providerEditForm.find("#map-canvas");
        if (mapCanvas.length) {
            if (typeof google === 'object' && typeof google.maps === 'object') {
                google.maps.event.addDomListener(window, 'load', mapInitialize);


                var georows = $("#geogroup").first();


                markers = [];

                georows.find('input').each(function (e) {
                    var geoLatLng = $(this).val().split(',');
                    markers.push(geoLatLng);
                });


                var markersSet = false;

                providerEditForm.on('change.zf.tabs', '[data-tabs]', function (e) {

                    //     if (markersSet === false) {

                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0, tot = markers.length; i < tot; i++) {
                        var myLatlng = new google.maps.LatLng(markers[i][0], markers[i][1]);
                        var marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            title: ''
                        });

                        marker.setMap(map);
                        gMarkers.push(marker);
                        bounds.extend(marker.position);
                    }
                    markersSet = true;
                    //     }
                    var center = map.getCenter();
                    google.maps.event.trigger(map, "resize");
                    map.setCenter(center);
                    if (markers.length > 0) {
                        map.fitBounds(bounds);
                    }
                    var listener = google.maps.event.addListener(map, "idle", function () {
                        if (map.getZoom() > 16) {
                            map.setZoom(16);
                        }
                        google.maps.event.removeListener(listener);
                    });

                });
            }
            else {
                mapCanvas.append('<div data-alert class="alert-box alert">Map could not be loaded</div>');
            }
        }

        providerEditForm.on('click', 'a.rmgeo', function (e) {

            var inputtorm = $(this).closest('div.georow').find('input').first().val();
            var geoLatLngToRm = inputtorm.split(',');
            for (var i = 0, tot = gMarkers.length; i < tot; i++) {
                var gmark = gMarkers[i];
                console.log(gmark.position.lat() + ' ?? ' + geoLatLngToRm[0]);
                if (parseFloat(gmark.position.lat()) === parseFloat(geoLatLngToRm[0])) {
                    gmark.setMap(null);
                    gMarkers.splice(i, 1);
                }
            }
            $(this).closest('div.georow').remove();
            return false;
        });

        addGeoBtn.on('click', function (e) {

            e.preventDefault();
            var inputgeo = $("#latlng").val();
            if (!latlngVal.test(inputgeo)) {
                window.alert('incorrect value');
            }
            else {

                var rname = 'z';
                var possible = "0123456789";
                for (var i = 0; i < 5; i++) {
                    rname += possible.charAt(Math.floor(Math.random() * possible.length));
                }
                var html = '<div class="small-12 column collapse georow"><div class="small-11 column"><input name="f[uii][idpsso][geo][' + rname + ']" type="text" value="' + inputgeo + '" readonly="readonly"></div><div class="small-1 column"><a href="#" class="rmgeo"><i class="fa fa-trash alert" style="color: red"></i></a></div></div>';
                $(html).appendTo($('#geogroup'));
                if (typeof google === 'object' && typeof google.maps === 'object') {
                    var bounds = new google.maps.LatLngBounds();
                    var geoLatLng = inputgeo.split(',');
                    var myLatlng = new google.maps.LatLng(geoLatLng[0], geoLatLng[1]);

                    var marker = new google.maps.Marker({
                        position: myLatlng,
                        map: map,
                        title: ''
                    });
                    marker.setMap(map);
                    gMarkers.push(marker);

                    bounds.extend(marker.position);
                }


            }
        });

        var langinputrmval;
        providerEditForm.find('div.group').each(function () {
            var selectInside = $(this).find('select').first();
            $(this).find('button.langinputrm').each(function () {
                langinputrmval = $(this).attr('value');
                selectInside.find("option[value=" + langinputrmval + "]").each(function () {
                    $(this).toggleOption(true);
                    $(this).attr('disabled', true);
                });
            });
        });


        $("button#idpssoadddomainhint").click(function () {
            var rname = '';
            var possible = "0123456789";
            for (var i = 0; i < 5; i++) {

                rname += possible.charAt(Math.floor(Math.random() * possible.length));
            }

            var rmbtn = $("button#helperbutttonrm").html();
            var inputname = $(this).attr('value');

            var rowinputname = 'f[uii][idpsso][domainhint][n' + rname + ']';
            var row = createRowWithLangRm('Domain Hint', 'Domain Hint', rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#idpssoaddiphint").click(function () {
            var rname = '';
            var possible = "0123456789";
            for (var i = 0; i < 5; i++) {
                rname += possible.charAt(Math.floor(Math.random() * possible.length));
            }

            var rmbtn = $("button#helperbutttonrm").html();
            var inputname = $(this).attr('value');

            var rowinputname = 'f[uii][idpsso][iphint][n' + rname + ']';
            var row = createRowWithLangRm('IP Hint', 'IP Hint', rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });

        $("button#addlhelpdesk").click(function () {
            var selected = $("span.lhelpdeskadd option:selected").first();
            var nf = selected.val();
            var rmbtn = $("button#helperbutttonrm").html();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[lhelpdesk][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#addldisplayname").click(function () {
            var selected = $("span.ldisplaynameadd option:selected").first();
            var nf = selected.val();
            var rmbtn = $("button#helperbutttonrm").html();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[ldisplayname][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });


        $("button#idpadduiidisplay").click(function () {
            var selected = $("span.idpuiidisplayadd option:selected").first();
            var nf = selected.val();
            var rmbtn = $("button#helperbutttonrm").html();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[uii][idpsso][displayname][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#idpadduiihelpdesk").click(function () {
            var selected = $("span.idpuiihelpdeskadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var rmbtn = $("button#helperbutttonrm").html();
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[uii][idpsso][helpdesk][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#spadduiidisplay").click(function () {
            var selected = $("span.spuiidisplayadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var rmbtn = $("button#helperbutttonrm").html();
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[uii][spsso][displayname][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#spadduiihelpdesk").click(function () {
            var selected = $("span.spuiihelpdeskadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var rmbtn = $("button#helperbutttonrm").html();
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[uii][spsso][helpdesk][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#spadduiidesc").click(function () {
            var selected = $("span.spuiidescadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var rmbtn = $("button#helperbutttonrm").html();
            selected.attr('disabled', true).attr('selected', false);

            $("<div class=\"small-12 columns\"><div class=\"small-3 columns\"><label for=\"f[uii][spsso][desc][" + nf + "]\" class=\"right inline\">" + nfv + "</label></div><div class=\"small-6 large-7 columns\"><textarea id=\"f[uii][spsso][desc][" + nf + "]\" name=\"f[uii][spsso][desc][" + nf + "]\" rows=\"5\" cols=\"40\"/></textarea></div><div class=\"small-3 large-2 columns\"><button type=\"button\" class=\"btn langinputrm button left inline alert\" name=\"uiispdescrm\" value=\"" + nf + "\">" + rmbtn + "</button></div></div>").insertBefore($(this).closest('span').parent());
        });

        $("#spadduiikeywords").click(function () {
            var selected = $("span.spuiikeywordsadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var rmbtn = $("button#helperbutttonrm").html();
            selected.attr('disabled', true).attr('selected', false);

            $("<div class=\"small-12 columns\"><div class=\"small-3 columns\"><label for=\"f[uii][spsso][keywords][" + nf + "]\" class=\"right inline\">" + nfv + "</label></div><div class=\"small-6 large-7 columns\"><textarea id=\"f[uii][spsso][keywords][" + nf + "]\" name=\"f[uii][spsso][keywords][" + nf + "]\" rows=\"5\" cols=\"40\"/></textarea></div><div class=\"small-3 large-2 columns\"><button type=\"button\" class=\"langinputrm button  left inline alert\" name=\"uiispkeywordsrm\" value=\"" + nf + "\">" + rmbtn + "</button></div></div>").insertBefore($(this).closest('span').parent());
        });

        $("button#addlname").click(function () {
            var selected = $("span.lnameadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var rmbtn = $("button#helperbutttonrm").html();
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[lname][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });


        var btnNewLang = $("button[name='addinnewlang']");
        btnNewLang.on('click', function (e) {
            var el = $(this);
            var group = el.closest('fieldset');

            var langDropdown = el.closest('span');
            if (langDropdown.length === 0) {


                return false;
            }
            var selected = langDropdown.find(':selected').first();
            if (selected.length === 0) {

                return false;
            }
            var isdisabled = selected.attr('disabled');
            if (isdisabled !== null && isdisabled === 'disabled') {


                return false;
            }
            var langselected = selected.val();
            var langselectedStr = selected.text();
            if (typeof langselected === 'undefined' || langselected === '') {

                return false;
            }
            var rmbtn = $("button#helperbutttonrm").html();
            var inputname = el.attr('value').replace('XXX', langselected);
            selected.attr('disabled', true).attr('selected', false);
            var row = createRowWithLangRm(langselected, langselectedStr, inputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());


        });


        $("button#idpadduiidesc").click(function () {
            var selected = $("span.idpuiidescadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var rmbtn = $("button#helperbutttonrm").html();
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            $("<div class=\"small-12 columns\"><div class=\"small-3 columns\"><label for=\"f[uii][idpsso][desc][" + nf + "]\" class=\"right inline\">" + nfv + " </label></div><div class=\"small-6 large-7 columns\"><textarea id=\"f[uii][idpsso][desc][" + nf + "]\" name=\"f[uii][idpsso][desc][" + nf + "]\" rows=\"5\" cols=\"40\"/></textarea></div><div class=\"small-3 large-2 columns\"> <button type=\"button\" class=\" langinputrm button  left inline alert\" name=\"ldesc\" value=\"" + nf + "\">" + rmbtn + "</button></div></div>").insertBefore($(this).closest('span').parent());
        });
        $("button#idpadduiikeywords").click(function () {
            var selected = $("span.idpuiikeywordsadd option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var rmbtn = $("button#helperbutttonrm").html();
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            $("<div class=\"small-12 columns\"><div class=\"small-3 columns\"><label for=\"f[uii][idpsso][keywords][" + nf + "]\" class=\"right inline\">" + nfv + " </label></div><div class=\"small-6 large-7 columns\"><textarea id=\"f[uii][idpsso][keywords][" + nf + "]\" name=\"f[uii][idpsso][keywords][" + nf + "]\" rows=\"5\" cols=\"40\"/></textarea></div><div class=\"small-3 large-2 columns\"> <button type=\"button\" class=\"langinputrm button  left inline alert\" name=\"lkeywords\" value=\"" + nf + "\">" + rmbtn + "</button></div></div>").insertBefore($(this).closest('span').parent());
        });

        $("button#addlprivacyurlspsso").click(function () {
            var selected = $("span.addlprivacyurlspsso option:selected").first();
            var nf = selected.val();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var rmbtn = $("button#helperbutttonrm").html();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[prvurl][spsso][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });
        $("button#addlprivacyurlidpsso").click(function () {
            var selected = $("span.addlprivacyurlidpsso option:selected").first();
            var nf = selected.val();
            var rmbtn = $("button#helperbutttonrm").html();
            if (typeof nf === 'undefined') {
                return false;
            }
            var nfv = selected.text();
            var inputname = $(this).attr('value');
            selected.attr('disabled', true).attr('selected', false);
            var rowinputname = 'f[prvurl][idpsso][' + nf + ']';
            var row = createRowWithLangRm(nf, nfv, rowinputname, rmbtn);
            row.insertBefore($(this).closest('span').parent());
        });

        $("#ncontactbtn").click(function () {
            var rname = genRandomStr(5);
            var btnvalues = $(this).attr('value').split('|');
            var newelement = '<div class="group"><div class="small-12 columns"><fieldset><legend>' + btnvalues[5] + '</legend><div><div class="small-12 columns"><div class="small-3 columns"><label for="f[contact][n_' + rname + '][type]" class="right inline">' + btnvalues[1] + '</label></div><div class="small-8 large-7 columns inline"><select name="f[contact][n_' + rname + '][type]"> <option value="administrative">Administrative</option> <option value="technical">Technical</option> <option value="support" selected="selected">Support</option> <option value="billing">Billing</option> <option value="other">Other</option> <option value="other-sirfti">Security (Sirfty)</option> </select></div><div class="small-1 large-2 columns"></div></div> <div class="small-12 columns"><div class="small-3 columns"><label for="f[contact][n_' + rname + '][fname]" class="right inline">' + btnvalues[2] + '</label></div><div  class="small-8 large-7 columns"><input type="text" name="f[contact][n_' + rname + '][fname]" value="" id="f[contact][n_' + rname + '][fname]" class="right inline" /></div><div class="small-1 large-2 columns"></div></div> <div class="small-12 columns"><div  class="small-3 columns"><label for="f[contact][n_' + rname + '][sname]" class="right inline">' + btnvalues[3] + '</label></div><div class="small-8 large-7 columns"><input type="text" name="f[contact][n_' + rname + '][sname]" value="" id="f[contact][n_' + rname + '][sname]" class="right inline" /></div><div class="small-1 large-2 columns"></div></div><div class="small-12 columns"><div class="small-3 columns"><label for="f[contact][n_' + rname + '][email]" class="right inline ">' + btnvalues[4] + '</label></div><div class="small-8 large-7 columns"><input type="text" name="f[contact][n_' + rname + '][email]" value="" id="f[contact][n_' + rname + '][email]" class="right inline" /></div><div class="small-1 large-2 columns"></div></div><div class="rmelbtn small-12 columns"><div class="small-9 large-10 columns"><button type="button" class="btn contactrm  alert button inline right" name="contact" value="' + rname + '">' + btnvalues[0] + '</button></div><div class="small-3 large-2 columns"></div></div></div></fieldset></div></div>';
            $(this).parent().before(newelement);

        });

        $("#nidpssocert").click(function () {
            var rname = 'newx' + genRandomStr(5);
            var newelement = '<div class="certgroup small-12 columns"><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][idpsso][' + rname + '][type]" class="inline right">Certificate type</label></div><div class="small-6 large-7 columns"><select name="f[crt][idpsso][' + rname + '][type]"> <option value="x509">x509</option> </select></div><div class="small-3 large-2 columns"></div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns"><div class="small-3 columns"><label for="f[crt][idpsso][' + rname + '][usage]" class="inline right">Certificate use</label></div><div class="small-6 large-7 columns"><select name="f[crt][idpsso][' + rname + '][usage]"> <option value="signing">signing</option> <option value="encryption">encryption</option> <option value="both" selected="selected">signing and encryption</option> </select> </div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][idpsso][' + rname + '][keyname]" class="inline right">KeyName</label></div><div class="small-6 large-7 columns"><input type="text" name="f[crt][idpsso][' + rname + '][keyname]" value="" id="f[crt][idpsso][' + rname + '][keyname]" class=""  /> </div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns"><div class="small-3 columns"><label for="f[crt][idpsso][' + rname + '][certdata]" class="inline right">Certificate</label></div><div class="small-6 large-7 columns"><textarea name="f[crt][idpsso][' + rname + '][certdata]" cols="65" rows="20" id="f[crt][idpsso][' + rname + '][certdata]" class="certdata notice" ></textarea></div><div class="small-3 large-2 columns"></div></div>';
            $(this).parent().before(newelement);

        });

        $("#naacert").click(function () {
            var rname = 'newx' + genRandomStr(5);
            var newelement = '<div class="certgroup small-12 columns"><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][aa][' + rname + '][type]" class="inline right">Certificate type</label></div><div class="small-6 large-7 columns"><select name="f[crt][aa][' + rname + '][type]"> <option value="x509">x509</option> </select> </div><div class="small-3 large-2 columns"></div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns"><div class="small-3 columns"><label for="f[crt][aa][' + rname + '][usage]" class="inline right">Usage</label></div><div class="small-6 large-7 columns"><select name="f[crt][aa][' + rname + '][usage]"> <option value="signing">signing</option> <option value="encryption">encryption</option> <option value="both" selected="selected">signing and encryption</option> </select> </div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][aa][' + rname + '][keyname]" class="inline right">KeyName</label></div><div class="small-6 large-7 columns"><input type="text" name="f[crt][aa][' + rname + '][keyname]" value="" id="f[crt][aa][' + rname + '][keyname]" class=""  /> </div><div class="small-3 large-2 columns"></div></div><div class="small-12 columns"><div class="small-3 columns"><label for="f[crt][aa][' + rname + '][certdata]" class="inline right">Certificate</label></div><div class="small-6 large-7 columns"><textarea name="f[crt][aa][' + rname + '][certdata]" cols="65" rows="20" id="f[crt][aa][' + rname + '][certdata]" class="certdata notice" ></textarea> </div><div class="small-3 large-2 columns"></div></div> ';
            $(this).parent().before(newelement);
        });
        $("#nspssocert").click(function () {
            var rname = 'newx' + genRandomStr(5);
            var newelement = '<div class="certgroup small-12 columns"><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][spsso][' + rname + '][type]" class="right inline">Certificate type</label></div><div class="small-8 large-7 columns"><select name="f[crt][spsso][' + rname + '][type]"><option value="x509">x509</option></select> </div><div class="small-1 large-2 columns end"></div></div><div class="small-12  columns"><div class="small-3 columns"><label for="f[crt][spsso][' + rname + '][usage]" class="right inline">Certificate use</label></div><div class="small-8 large-7 columns"><select name="f[crt][spsso][' + rname + '][usage]"><option value="signing">signing</option> <option value="encryption">encryption</option> <option value="both" selected="selected">signing and encryption</option> </select></div><div class="small-1 large-2 columns end"></div></div><div class="small-12 columns hidden"><div class="small-3 columns"><label for="f[crt][spsso][' + rname + '][keyname]" class="right inline">KeyName</label></div><div class="small-8 large-7 columns"><input type="text" name="f[crt][spsso][' + rname + '][keyname]" value="" id="f[crt][spsso][' + rname + '][keyname]" class=""  /></div><div class="small-1 large-2 columns end"></div> </div><div class="small-12 columns"><div class="small-3 columns"><label for="f[crt][spsso][' + rname + '][certdata]" class="right inline">Certificate</label></div><div class="small-8 large-7 columns"><textarea name="f[crt][spsso][' + rname + '][certdata]" cols="65" rows="20" id="f[crt][spsso][' + rname + '][certdata]" class="certdata" ></textarea></div><div class="small-1 large-2 columns end"></div></div><div class="small-12 columns"><div class="small-3 columns">&nbsp;</div><div class="small-6 large-7 columns"><button class="certificaterm button alert  right" value="' + rname + '" name="certificate" type="button">Remove certificate</button></div><div class="small-3 large-2 columns"></div></div></div>';
            $(this).parent().before(newelement);

        });

        $("#nacsbtn").click(function () {
            var rname = genRandomStr(5);
            var newelement = '<div class=\"srvgroup\"><div class=\"small-12 columns\"><div class=\"small-3 columns\"><label for="f[srv][AssertionConsumerService][n_' + rname + '][bind]" class=\"right inline\">Binding Name</label></div><div class=\"small-5 columns inline\"><select name="f[srv][AssertionConsumerService][n_' + rname + '][bind]"> <option value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST">urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST</option> <option value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" selected="selected">urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact</option> <option value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign">urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign</option> <option value="urn:oasis:names:tc:SAML:2.0:bindings:PAOS">urn:oasis:names:tc:SAML:2.0:bindings:PAOS</option> <option value="urn:oasis:names:tc:SAML:2.0:profiles:browser-post">urn:oasis:names:tc:SAML:2.0:profiles:browser-post</option> <option value="urn:oasis:names:tc:SAML:1.0:profiles:browser-post">urn:oasis:names:tc:SAML:1.0:profiles:browser-post</option> <option value="urn:oasis:names:tc:SAML:1.0:profiles:artifact-01">urn:oasis:names:tc:SAML:1.0:profiles:artifact-01</option> </select></div> <div class="small-4 columns"><div class="small-6 columns"><input type="text" name="f[srv][AssertionConsumerService][n_' + rname + '][order]" value="" id="f[srv][AssertionConsumerService][n_' + rname + '][order]" size="2" maxlength="2" class="acsindex "  /></div><div class="small-6 columns"><label for="f[srv][AssertionConsumerService][n_' + rname + '][default]">Is default</label><input type="radio" name="f[srv][AssertionConsumerService][n_' + rname + '][default]" value="1" id="f[srv][AssertionConsumerService][n_' + rname + '][default]" class="acsdefault"/></div></div> </div>          <div class="small-12 columns"><div class="small-3 columns"><label for="f[srv][AssertionConsumerService][n_' + rname + '][url]" class=\"right inline\">URL</label></div><div class=\"small-8 large-7 columns inline\"><input name="f[srv][AssertionConsumerService][n_' + rname + '][url]" id="f[srv][AssertionConsumerService][n_' + rname + '][url]" type="text"></div><div class=\"small-3 large-2 columns\"><button class="inline left button  alert rmfield"  name="rmfield" type="button">Remove</button></div></div></div>';
            $(this).parent().before(newelement);

        });
        $("#nidpartifactbtn").click(function () {
            var rname = genRandomStr(5);
            var newelement = '<div class="srvgroup"><div class="small-12 columns"><div class=\"small-3 columns\"><label for="f[srv][IDPArtifactResolutionService][n_' + rname + '][bind]" class=\"right inline\">Binding Name</label></div><div class="small-6 large-7 columns inline"><select name="f[srv][IDPArtifactResolutionService][n_' + rname + '][bind]"> <option value="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" selected="selected">urn:oasis:names:tc:SAML:2.0:bindings:SOAP</option> <option value="urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding">urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding</option></select></div> <div class="small-2 large-1 columns end"><input type="text" name="f[srv][IDPArtifactResolutionService][n_' + rname + '][order]" value="" id="f[srv][IDPArtifactResolutionService][n_' + rname + '][order]" size="2" maxlength="2" class="acsindex "  /></div></div> <div class="small-12 columns"><div class=\"small-3 columns\"><label for="f[srv][IDPArtifactResolutionService][n_' + rname + '][url]" class=\"right inline\">URL</label></div><div class="small-6 large-7 columns inline"><input name="f[srv][IDPArtifactResolutionService][n_' + rname + '][url]" id="f[srv][IDPArtifactResolutionService][n_' + rname + '][url]" type="text"></div><div class="small-3 large-2 columns"><button class="inline left button  alert rmfield" value="" name="rmfield" type="button">Remove</button></div></div>';
            $(this).parent().before(newelement);
        });


        $("#nspartifactbtn").click(function () {
            var rname = genRandomStr(5);
            var newelement = '<div class="srvgroup"><div class="small-12 columns"><div class=\"small-3 columns\"><label for="f[srv][SPArtifactResolutionService][n_' + rname + '][bind]" class=\"right inline\">Binding Name</label></div><div class=\"small-8 large-7 columns inline\"><select name="f[srv][SPArtifactResolutionService][n_' + rname + '][bind]"> <option value="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" selected="selected">urn:oasis:names:tc:SAML:2.0:bindings:SOAP</option> <option value="urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding">urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding</option></select> </div> <div class=\"small-1  columns left\"><input type="text" name="f[srv][SPArtifactResolutionService][n_' + rname + '][order]" value="" id="f[srv][SPArtifactResolutionService][n_' + rname + '][order]" size="2" maxlength="2" class="acsindex "  /></div></div>           <div class="small-12 columns"><div class="small-3 columns"><label for="f[srv][SPArtifactResolutionService][n_' + rname + '][url]" class="right inline">URL</label></div><div class=\"small-6 large-7 columns inline\"><input name="f[srv][SPArtifactResolutionService][n_' + rname + '][url]" id="f[srv][SPArtifactResolutionService][n_' + rname + '][url]" type="text"> </div><div class=\"small-3 large-2 columns\"><button class="inline left button  alert rmfield"  name="rmfield" type="button">Remove</button></div></div>';
            $(this).parent().before(newelement);
        });
        $("#ndrbtn").click(function () {
            var rname = genRandomStr(5);
            var newelement = '<div class="srvgroup"><div class="small-12 columns"><div class=\"small-3 columns\"><label for="f[srv][DiscoveryResponse][n_' + rname + '][bind]" class=\"right inline\">Binding Name</label></div><div class="small-6 large-7 columns"><select name="f[srv][DiscoveryResponse][n_' + rname + '][bind]"><option value="urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol">urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol</option></select> </div><div class="small-1 columns end"><input type="text" name="f[srv][DiscoveryResponse][n_' + rname + '][order]" value="" id="f[srv][DiscoveryResponse][n_' + rname + '][order]" size="2" maxlength="2" class="acsindex "  /></div></div><div class="small-12 columns"><div class=\"small-3 columns\"><label for="f[srv][DiscoveryResponse][n_' + rname + '][url]" class="right inline">URL</label></div><div class="small-6 large-7 columns"><input name="f[srv][DiscoveryResponse][n_' + rname + '][url]" id="f[srv][DiscoveryResponse][n_' + rname + '][url]" type="text"></div><div class="small-1 columns end"><button class="rmfield button alert  left" name="rmfield">Remove</button></div></div></div>';
            $(this).parent().before(newelement);
        });
        $("#nribtn").click(function () {
            var rname = genRandomStr(5);
            var newelement = '<div class="small-12 columns srvgroup"><div class="small-3 columns"><label for="f[srv][RequestInitiator][n_' + rname + '][url]" class="right inline">URL</label></div><div class="small-6 large-7 columns"><input name="f[srv][RequestInitiator][n_' + rname + '][url]" id="f[srv][RequestInitiator][n_' + rname + '][url]" type="text"></div><div class="small-3 large-2 columns"><button type="button" class="inline left button  alert rmfield" name="rmfield" value="">remove</button></div></div>';
            $(this).parent().before(newelement);
        });

        $('button.addnewlogo').click(function () {
            var logolangtxt;
            var f = $(this).closest('div.reviewlogo');
            var ftype = f.attr('id');
            var rname = genRandomStr(5);
            var type = 'sp';
            if (ftype === 'idpreviewlogo') {
                type = 'idp';
            }
            var logourl = f.find("input[name='" + type + "inputurl']").attr('value');
            var logosize = f.find("input[name='" + type + "inputsize']").attr('value');
            var logolang = f.find("select[name='" + type + "logolang']").val();
            var logoembeddedcheck = f.find("input[name='" + type + "embedded']").first();
            var logoraw = f.find("input[name='" + type + "logoraw']").attr('value');

            if (logolang === '0') {
                logolangtxt = 'unspec';
            }
            else {
                logolangtxt = logolang;
            }

            var hiddeninputurl;

            var hiddeninputsize = '<input type="hidden" name="f[uii][' + type + 'sso][logo][n' + rname + '][size]" value="' + logosize + '">';
            var hiddeninputlang = '<input type="hidden" name="f[uii][' + type + 'sso][logo][n' + rname + '][lang]" value="' + logolang + '">';
            var origblock = $('li#nlogo' + type + 'row');
            var newblock = origblock.clone(true);
            newblock.removeAttr('id');
            if (logoembeddedcheck !== null && logoembeddedcheck.is(':checked') && logoembeddedcheck.val() === 'embedded' && logoraw !== undefined && logoraw !== null && logoraw !== '') {
                hiddeninputurl = '<input type="hidden" name="f[uii][' + type + 'sso][logo][n' + rname + '][url]" value="' + logoraw + '">';
                newblock.find('img').first().attr('src', logoraw).append(hiddeninputurl).append(hiddeninputsize).append(hiddeninputlang);
                newblock.find('div.logoinfo').first().append('' + logolangtxt + '<br />').append(logosize + '<br />');
            }
            else {
                hiddeninputurl = '<input type="hidden" name="f[uii][' + type + 'sso][logo][n' + rname + '][url]" value="' + logourl + '">';
                newblock.find('img').first().attr('src', logourl).append(hiddeninputurl).append(hiddeninputsize).append(hiddeninputlang);
                newblock.find('div.logoinfo').first().append('' + logolangtxt + '<br />').append(logourl + '<br />').append(logosize + '<br />');
            }


            newblock.insertBefore(origblock).show();


        });

        $('button.getlogo').click(function () {

            var alertlogoretrieve, imgdiv, logourl, logoreview;
            var btnname = $(this).attr('name');
            var link = $(this).attr("value");
            if (btnname === 'idpgetlogo') {
                logoreview = $('#idpreviewlogo');
                logoreview.hide();
                alertlogoretrieve = $("small.idplogoretrieve");
                alertlogoretrieve.empty().hide();
                logourl = $("[name='idplogoretrieve']").val();
                imgdiv = logoreview.find("div.imgsource").first();
            }
            else {
                logoreview = $('#spreviewlogo');
                logoreview.hide();
                alertlogoretrieve = $("small.splogoretrieve");
                alertlogoretrieve.empty().hide();
                logourl = $("[name='splogoretrieve']").val();
                imgdiv = logoreview.find("div.imgsource").first();

            }

            var csrfname = $("[name='csrfname']").val();
            var csrfhash = $("[name='csrfhash']").val();
            var data = [{name: csrfname, value: csrfhash}, {name: 'logourl', value: logourl}];
            $.ajax({
                type: "POST",
                url: link,
                cache: false,
                data: data,
                dataType: "json",
                success: function (json) {
                    if (json) {
                        if (json.error) {
                            alertlogoretrieve.append(json.error).show();
                        }
                        else if (json.data) {

                            var jsondata = json.data;
                            var img = new Image();
                            img.onload = function () {

                            };
                            img.src = jsondata.url;
                            var sizeinfo = jsondata.width + 'x' + json.data.height;
                            var hiddeninputurl, hiddeninputsize, hiddeninputtype, hiddenlogoraw;
                            var rname = genRandomStr(5);
                            if (btnname === 'idpgetlogo') {
                                hiddeninputtype = '<input type="hidden" name="logotype" value="idp">';
                                hiddeninputurl = '<input type="hidden" name="idpinputurl" value="' + json.data.url + '">';
                                hiddeninputsize = '<input type="hidden" name="idpinputsize" value="' + sizeinfo + '">';
                                hiddenlogoraw = '<input type="hidden" name="idplogoraw" value="' + json.data.raw + '">';

                                imgdiv.empty().append(img).append(hiddeninputurl).append(hiddeninputsize).append(hiddeninputtype).append(hiddenlogoraw);
                                $('div#idpreviewlogo div.logoinfo').empty().append(sizeinfo);
                                logoreview.show();
                            }
                            else if (btnname === 'spgetlogo') {
                                hiddeninputtype = '<input type="hidden" name="logotype" value="idp">';
                                hiddeninputurl = '<input type="hidden" name="spinputurl" value="' + json.data.url + '">';
                                hiddeninputsize = '<input type="hidden" name="spinputsize" value="' + sizeinfo + '">';
                                hiddenlogoraw = '<input type="hidden" name="splogoraw" value="' + json.data.raw + '">';
                                imgdiv.empty().append(img).append(hiddeninputurl).append(hiddeninputsize).append(hiddeninputtype).append(hiddenlogoraw);
                                $('div#spreviewlogo div.logoinfo').empty().append(sizeinfo);
                                logoreview.show();
                            }
                        }
                    }
                }
            });
        });


        providerEditForm.on("click", "button.contactrm", function (event) {
            var bval = $(this).attr('value');
            var bname = $(this).attr('name');
            var fieldset = $(this).closest('div.group');
            fieldset.remove();
        });

        providerEditForm.on("click", "button.certificaterm", function (event) {
            var bval = $(this).attr('value');
            var bname = $(this).attr('name');
            var fieldset = $(this).closest('div.certgroup');
            fieldset.remove();
        });

        providerEditForm.on("click", "input.acsdefault", function (event) {
            if ($(this).is(":checked")) {
                $(".acsdefault").not(this).removeAttr("checked");
            }
        });

        providerEditForm.on("click", "button.rmfield", function (event) {
            var lrow = $(this).closest('div.srvgroup');
            var bval = $(this).attr('value');
            var bname = $(this).attr('name');
            lrow.find("input").each(function () {
                $(this).attr('value', '');
            });
            lrow.find("textarea").each(function () {
                $(this).val("");
            });
            lrow.remove();
        });


        providerEditForm.on("click", "button.langinputrm", function (event) {
            var lrow = $(this).closest('div').parent();
            var bval = $(this).attr('value');
            var select = $(this).closest('div.group').find('select').first();
            lrow.find("input").each(function () {
                $(this).attr('value', '');
            });
            lrow.find("textarea").each(function () {
                $(this).val("");
            });
            select.find("option[value=" + bval + "]").each(
                function () {
                    $(this).toggleOption(true);
                    $(this).attr('disabled', false);
                }
            );
            lrow.remove();
            return false;
        });

    }

    $('#spmatrixload').on('click', function (e) {
        var loadbutton = $(this);
        var link = $(this).attr('data-jagger-ajaxurl');
        var resulttarget = $(document).find('#spmatrixdiv').first();
        $.ajax({
            type: "GET",
            url: link,
            cache: false,
            dataType: "json",
            beforeSend: function () {
                spinImage.show();
            },
            success: function (json) {
                spinImage.hide();
                if (json) {

                    var attrdefs = json.attrs;
                    var policies = json.data;
                    var prefurl = json.providerprefurl;
                    var mlegend = '<div><span class="den">&nbsp;&nbsp;&nbsp;</span> <span>denied</span></div>' +
                        '<div><span class="perm">&nbsp;&nbsp;&nbsp;</span><span>permitted</span></div>' +
                        '<div><span class="dis">&nbsp;&nbsp;&nbsp;</span><span>not supported</span></div>' +
                        '<div><span>R</span>-<span>required</span></div>' +
                        '<div><span>D</span>-<span>desired</span></div>';

                    var countAttr = 0;
                    var tbl = '<table class="table table-header-rotated" id="idpmatrixresult"><thead><tr>';
                    tbl += '<th style="background: white">' + mlegend + '</th>';
                    $.each(attrdefs, function (a, p) {
                        tbl += '<th class="rotate"><div><span>' + a + '</span></div></th>';
                        countAttr++;
                    });
                    if (countAttr > 52) {
                        $("#container").css({"max-width": "100%"});
                    }
                    var cell, requiredAttr, pAttr, cl;
                    tbl += '</tr></thead><tbody>';
                    $.each(policies, function (i, a) {

                        tbl += '<tr><td data-jagger-entidlink="' + a.idpid + '" class="searchcol"><a href="' + prefurl + '/' + a.idpid + '" title="' + a.entityid + '" >' + a.name + '</a><span class="hidden">' + i + '</span></td>';
                        $.each(attrdefs, function (k, v) {
                            cl = '';
                            requiredAttr = a.data.attributes['' + k + ''];
                            cell = v[0].toUpperCase();
                            if (requiredAttr === undefined) {
                                cl = 'dis';
                            }
                            else if (requiredAttr === 0) {
                                cl = 'den';
                            }
                            else if (requiredAttr === 1) {
                                if (cell === 'R') {
                                    cl = 'perm';
                                }
                                else {
                                    cl = 'den';
                                }
                            }
                            else if (requiredAttr === 2) {
                                cl = 'perm';
                            }

                            tbl += '<td class="' + cl + '">';
                            tbl += cell + '</td>';
                        });
                    });
                    tbl += '</tbody></table>';
                    loadbutton.hide();
                    resulttarget.html(tbl);
                }
            },
            error: function () {
                spinImage.hide();
            }
        });
    });
    var providerdetailurl;

    if ($('#attrpols').length > 0) {
        var attrpolsVar = $('#attrpols').first();
        var attrpolstabVar = $('#attrpolstab').first();
        var doReloadTab = function () {
            attrpolstabVar.foundation('_handleTabChange', $('li.tabs-title.is-active'));
        };

        var arpmaddspecattrVar = $('#arpmaddspecattr').first();
        providerdetailurl = attrpolsVar.attr('data-jagger-providerdetails');
        var fedid;
        attrpolstabVar.on('change.zf.tabs', function (event, tab) {


            var progressbarHTML = '<div class="progress"><span class="meter" style="width: 10%"></span></div>';
            var progressbar = $($.parseHTML(progressbarHTML));
            var meter = progressbar.find('span.meter').first();
            var addbtn = $('#addattrsupport').clone(true).removeClass('hidden');
            var addentcatbtn = $('#addentcatattr').clone(true).removeClass('hidden');
            var addspecbtn = $('#addespecattr').clone(true).removeClass('hidden');
            console.log(event, tab);
            var link = $(tab).attr('data-reveal-ajax-tab');
            if (link === undefined) {
                return false;
            }
            var target = attrpolsVar.find('section.is-active').first();
            //  progressbar.appendTo(target);
            var tbl;
            $.ajax({
                url: link,
                method: 'GET',
                dataType: 'json',
                beforeSend: function () {
                    spinImage.show();
                },
                success: function (data) {
                    spinImage.hide();
                    meter.css('width', '100%');
                    var idf, supplbl, nrcols, policy, datajaggersupm, support = [];
                    if (data.type === 'supported') {
                        // addbtn.removeClass('hidden');
                        $.each(data.data.support, function (k, v) {
                            support.push(v);
                        });
                        tbl = '<div class="small-12 column"><table class="table"><thead><tr>';
                        $.each(data.definitions.columns, function (i, a) {
                            tbl += '<th>' + a + '</th>';
                        });
                        tbl += '</tr></thead>';

                        $.each(data.data.global, function (i, a) {
                            policy = parseInt(a);
                            supplbl = '';
                            tbl += '<tr><td>' + data.definitions.attrs[i] + '</td><td>';
                            if (policy === 0) {
                                tbl += '<span class="label alert">' + data.definitions.policy[a] + '</span>';
                            }
                            else if (policy === 1) {
                                tbl += '<span class="label warning">' + data.definitions.policy[a] + '</span>';
                            }
                            else if (policy === 2) {
                                tbl += '<span class="label success">' + data.definitions.policy[a] + '</span>';
                            }
                            else {
                                tbl += '<span class="label">' + data.definitions.policy[a.policy] + '</span>';
                            }

                            idf = support.indexOf(parseInt(i));
                            var datajaggersup = '1';
                            if (idf === -1) {
                                supplbl = '&nbsp;<span class="label alert">' + data.definitions.policy[1000] + '</span>';
                                datajaggersup = '0';
                            }
                            tbl += supplbl;
                            tbl += '</td><td>';


                            tbl += '<a href="#" class="modalconfirm" data-jagger-attrpolicy="' + a + '" data-jagger-attrsupport="' + datajaggersup + '" data-jagger-attrname="' + data.definitions.attrs[i] + '" data-jagger-attrid="' + i + '" data-jagger-action="edit" data-jagger-arp="global"><i class="fa fa-edit"></i></a>';
                            if (idf === -1) {
                                tbl += '&nbsp;&nbsp;&nbsp;<a href="#" class="modalconfirm" data-jagger-attrsupport="' + datajaggersup + '" data-jagger-attrname="' + data.definitions.attrs[i] + '" data-jagger-attrid="' + i + '" data-jagger-action="delete" data-jagger-arp="global"><i class="fa fa-trash alert"></i></a>';

                            }

                            tbl += '</td></tr>';
                        });


                        tbl += '</table></div>';

                        addbtn.show().prependTo(target.html(tbl));

                    }
                    else if (data.type === 'federation') {
                        $.each(data.data.support, function (k, v) {
                            support.push(v);
                        });

                        nrcols = 0;
                        var fpolicy, labelclass;

                        var federationStr = data.definitions.lang.federation;

                        tbl = '<div class="small-12 column"><table class="table"><thead><tr>';
                        $.each(data.definitions.columns, function (i, v) {
                            nrcols = nrcols + 1;
                            tbl += '<th>' + v + '</th>';
                        });
                        tbl += '</tr></thead>';
                        var nrcols2 = nrcols - 2;
                        var statusstr = data.definitions.statusstr;

                        var feid, idf1;
                        $.each(data.data.fedpols, function (i, v) {
                            var supportCopy = support.slice(0);
                            fedid = parseInt(i);
                            idf1 = data.data.activefeds.indexOf(fedid);

                            if (idf1 === -1) {
                                tbl += '<tr><td colspan="' + nrcols + '" class="highlight">' + federationStr + ': ' + data.definitions.feds[i] + ' <span class="label alert">' + statusstr.inactive + '</span></td></tr>';
                            }
                            else {
                                tbl += '<tr><td colspan="' + nrcols + '" class="highlight">' + federationStr + ': ' + data.definitions.feds[i] + '</td></tr>';
                            }
                            $.each(v, function (j, w) {
                                labelclass = '';
                                fpolicy = parseInt(w.policy);
                                idf = supportCopy.indexOf(parseInt(j));

                                if (fpolicy === 0) {
                                    labelclass = 'alert';
                                }
                                else if (fpolicy === 1) {
                                    labelclass = 'warning';
                                }
                                else if (fpolicy === 2) {
                                    labelclass = 'success';
                                }
                                tbl += '<tr><td>' + data.definitions.attrs[j] + '</td><td><span class="label ' + labelclass + '">' + data.definitions.policy[w.policy] + '</span><br/><small>'+w.comments.reverse().join('<br/>')+'</small>';
                                if (idf === -1) {
                                    tbl += '&nbsp;<span class="label alert">' + data.definitions.lang.unsupported + '</span>';
                                }
                                else {
                                    supportCopy.splice(idf, 1);
                                }

                                tbl += '</td><td></td><td colspan="' + nrcols2 + '"><a href="#" class="modalconfirm" data-jagger-attrpolicy="' + w.policy + '" data-jagger-arp="fed" data-jagger-action="edit" data-jagger-fedid="' + i + '" data-jagger-attrid="' + j + '" data-jagger-attrname="' + data.definitions.attrs[j] + '"><i class="fa fa-edit"></i></a></td></tr>';
                            });
                            $.each(supportCopy, function (jk, wk) {
                                tbl += '<tr><td>' + data.definitions.attrs[wk] + '</td><td><span class="label secondary">' + data.definitions.policy[100] + '</span></td><td></td><td colspan="' + nrcols2 + '"><a href="#" class="modalconfirm" data-jagger-arp="fed" data-jagger-attrname="' + data.definitions.attrs[wk] + '" data-jagger-attrpolicy="100" data-jagger-fedid="' + i + '" data-jagger-action="edit" data-jagger-attrid="' + wk + '"><i class="fa fa-edit"></i></a></td></tr>';
                            });


                        });


                        tbl += '</table></div>';
                        target.html(tbl);
                    }
                    else if (data.type === 'entcat') {
                        nrcols = 0;
                        var entpolicy;
                        var unsupwttr;
                        var ecmemberurl = data.definitions.ecmembers;

                        $.each(data.data.support, function (k, v) {
                            support.push(v);
                        });

                        tbl = '<div class="small-12 column"><table class="table"><thead><tr>';
                        $.each(data.definitions.columns, function (i, v) {
                            nrcols = nrcols + 1;
                            tbl += '<th>' + v + '</th>';
                        });
                        tbl += '</tr></thead>';

                        $.each(data.data.entcats, function (i, v) {
                            tbl += '<tr><td colspan="' + nrcols + '" class="highlight">EntityCategory: ' + data.definitions.entcats[i].name + '  ' + data.definitions.entcats[i].value + ' <i class="ecmembers fa fa-list"  data-jagger-jsource="' + ecmemberurl + '/' + i + '"></i></td></tr>';

                            $.each(v, function (j, w) {
                                unsupwttr = '';
                                idf = support.indexOf(parseInt(j));
                                if (idf === -1) {
                                    unsupwttr = '&nbsp;<span class="label alert">' + data.definitions.policy[1000] + '</span>';
                                }
                                labelclass = '';
                                entpolicy = parseInt(w.policy);
                                if (entpolicy === 0) {
                                    labelclass = 'alert';
                                }
                                else if (entpolicy === 1) {
                                    labelclass = 'warning';
                                }
                                else if (entpolicy === 2) {
                                    labelclass = 'success';
                                }


                                tbl += '<tr>';
                                tbl += '<td>' + data.definitions.attrs[j] + '</td><td><span class="label ' + labelclass + '">' + data.definitions.policy[w.policy] + '</span>' + unsupwttr + '<br /><small>'+w.comments.reverse().join('<br />')+'</small></td><td><a href="#" class="modalconfirm" data-jagger-arp="entcat" data-jagger-entcatid="' + i + '" data-jagger-attrid="' + j + '" data-jagger-arp="entcat" data-jagger-action="edit" data-jagger-attrname="' + data.definitions.attrs[j] + '" data-jagger-attrpolicy="' + w.policy + '"><i class="fa fa-edit"></i></a></td>';
                                tbl += '</tr>';
                            });

                        });


                        tbl += '</table></div>';
                        //target.html(tbl);
                        addentcatbtn.show().prependTo(target.html(tbl));
                    }
                    else if (data.type === 'sp') {
                        nrcols = 1;
                        tbl = '<div class="small-12 column"><table class="table"><thead><tr>';
                        $.each(data.definitions.columns, function (i, v) {
                            nrcols = nrcols + 1;
                            tbl += '<th>' + v + '</th>';
                        });
                        tbl += '</tr></thead>';
////////////////////////////////////////////////////////
                        $.each(data.data.supported, function (ks, vs) {
                            support.push(vs);
                        });
                        var spReqAttr;
                        var spReqAttrStr;
                        var sps = data.data.sps;
                        var specpolicy;
                        var policyLabels = {0: "alert", 1: "warning", 2: "success", 100: "secondary"};
                        var attrName;
                        var unsupportedLbl = '<span class="label alert">' + data.definitions.policy[1000] + '</span>';
                        var supportedLbl = '';
                        var supportedStatus;
                        var customattrpol;

                        $.each(data.data.sps, function (i, v) {

                                var spReqAttr = [];
                                if (v.req !== undefined) {
                                    $.each(v.req, function (p, w) {
                                        spReqAttr[p] = w;
                                    });
                                }
                                if (!$.isEmptyObject(v.spec)) {
                                    if (v.entityid !== undefined) {
                                        tbl += '<tr><td data-jagger-entidlink="' + i + '" colspan="' + nrcols + '" class="highlight" >' + v.entityid + '</td></tr>';
                                    }
                                    else {
                                        if (data.definitions.sps.hasOwnProperty(i)) {
                                            tbl += '<tr><td data-jagger-entidlink="' + i + '" colspan="' + nrcols + '" class="highlight">' + data.definitions.sps[i].entityid + ' <span class="label alert">disabled</span></td></tr>';
                                        }
                                        else {
                                            console.log('undefined ' + i + ' in data.definitions.sps');
                                        }
                                    }
                                    $.each(v.spec, function (j, l) {
                                        customattrpol = '';
                                        supportedStatus = '';
                                        idf = support.indexOf(parseInt(j));
                                        if (idf === -1) {
                                            supportedStatus = unsupportedLbl;
                                        }

                                        attrName = data.data.definitions.attrs[j];
                                        spReqAttrStr = '100';

                                        if (spReqAttr[j] !== undefined) {

                                            spReqAttrStr = spReqAttr[j];

                                            delete spReqAttr[j];


                                        }
                                        if (v.custom !== undefined && v.custom[j] !== undefined) {

                                            if (v.custom[j].policy.deny !== undefined) {
                                                customattrpol += '<span class="label alert">denied values:  ';
                                                $.each(v.custom[j].policy.deny, function (ip, iv) {
                                                    customattrpol += iv + ', ';
                                                });
                                                customattrpol += '</span>';
                                            }
                                            else {
                                                customattrpol += '<span class="label success">permited values: ';
                                                $.each(v.custom[j].policy.permit, function (ip, iv) {
                                                    customattrpol += iv + ', ';
                                                });
                                                customattrpol += '</span>';
                                            }
                                        }

                                        console.log(l);

                                        tbl += '<td>' + attrName + '</td>' +
                                            '<td><span class="label ' +
                                            policyLabels[l.policy] +
                                            '">' +
                                            data.definitions.policy[l.policy] +
                                            '</span>  ' + supportedStatus + ' ' +
                                            customattrpol + '<br /><small>'+l.comments.reverse().join('<br />')+'</small></td>'+ '</td>' +
                                            '<td>' + data.definitions.req[spReqAttrStr] + '</td>' +
                                            '<td>' +
                                            '<a href="#" class="modalconfirm" data-jagger-attrpolicy="' + l.policy + '" data-jagger-entityid="' + data.definitions.sps[i].entityid + '" data-jagger-attrname="' + attrName + '" data-jagger-spid="' + i + '" data-jagger-arp="sp" data-jagger-action="edit" data-jagger-attrid="' + j + '">' +
                                            '<i class="fa fa-edit"></i></a></td></tr>';
                                    });
                                    for (var vkey in spReqAttr) {
                                        if (spReqAttr.hasOwnProperty(vkey)) {
                                            customattrpol = '';
                                            if (v.custom !== undefined && v.custom[vkey] !== undefined) {

                                                if (v.custom[vkey].deny !== undefined) {
                                                    customattrpol += '<span class="label alert">denied values:  ';
                                                    $.each(v.custom[vkey].deny, function (ip, iv) {
                                                        customattrpol += iv + ', ';
                                                    });
                                                    customattrpol += '</span>';
                                                }
                                                else {
                                                    customattrpol += '<span class="label success">permited values: ';
                                                    $.each(v.custom[vkey].permit, function (ip, iv) {
                                                        customattrpol += iv + ', ';
                                                    });
                                                    customattrpol += '</span>';
                                                }
                                            }
                                            supportedStatus = '';
                                            idf = support.indexOf(parseInt(vkey));
                                            if (idf === -1) {
                                                supportedStatus = unsupportedLbl;
                                            }
                                            attrName = data.data.definitions.attrs[vkey];
                                            if (spReqAttr.hasOwnProperty(vkey)) {
                                                tbl += '<tr><td>' + attrName + '</td>' +
                                                    '<td><span class="label ' + policyLabels['100'] + '">' + data.definitions.policy['100'] + '</span>  ' + supportedStatus + ' ' + customattrpol + '</td>' +
                                                    '<td>' + data.definitions.req[spReqAttr[vkey]] + '</td>' +
                                                    '<td><a href="#" class="modalconfirm" data-jagger-attrpolicy="100" data-jagger-entityid="' + data.definitions.sps[i].entityid + '" data-jagger-attrname="' + attrName + '" data-jagger-spid="' + i + '" data-jagger-arp="sp" data-jagger-action="edit" data-jagger-attrid="' + vkey + '"><i class="fa fa-edit"></i></i></td></tr>';
                                            }
                                        }
                                    }

                                }

                            }
                        );

///////////////////////////////////////////////////////
                        tbl += '</table></div>';
                        addspecbtn.show().prependTo(target.html(tbl));

                    }


                    //target.html(tbl);


                },
                error: function (xhr, status, error) {
                    spinImage.hide();
                    target.html('<div data-aler class="alert-box alert">' + xhr.responseText + '</div>');
                }
            });


        });

        attrpolsVar.on('click', 'td.highlight', function (event) {
            var entlink = $(this).attr("data-jagger-entidlink");
            if (entlink !== undefined) {
                document.location.href = providerdetailurl + '/' + entlink;
                return false;
            }
        });
        attrpolsVar.on('click', 'a.modalconfirm', function (event) {
            event.preventDefault();
            var thisObj = $(this);
            var arptype = thisObj.attr('data-jagger-arp');
            var arpaction = thisObj.attr('data-jagger-action');
            var attrname = thisObj.attr('data-jagger-attrname');
            var attrid = thisObj.attr('data-jagger-attrid');
            var fedid = thisObj.attr('data-jagger-fedid');
            var entcatid = thisObj.attr('data-jagger-entcatid');
            var attrsupport = thisObj.attr('data-jagger-attrsupport');
            var attrpolicy = thisObj.attr('data-jagger-attrpolicy');
            var spid = thisObj.attr('data-jagger-spid');
            var entityid = thisObj.attr('data-jagger-entityid');
            var baseurl = $("[name='baseurl']").val();
            var modal;
            if (arptype !== undefined && arpaction !== undefined) {

                if (arptype === 'global' && arpaction === 'delete') {

                    modal = $("#arpmdelattr");
                    modal.find('.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
                    modal.find('input[name="attrname"]').first().val(attrname);
                    modal.find('input[name="attrid"]').first().val(attrid);
                    modal.find('span.attributename').first().html(attrname);
                    modal.foundation('open');
                }
                else if (arptype === 'global' && arpaction === 'edit') {
                    modal = $("#arpmeditglobalattr");
                    modal.find('.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
                    modal.find('span.attributename').first().html(attrname);
                    modal.find('input[name="attrname"]').first().val(attrname);
                    modal.find('input[name="attrid"]').first().val(attrid);
                    var supportInput = modal.find('input[name="support"]').first();
                    if (attrsupport === '1') {
                        supportInput.prop("checked", true);
                    }
                    else {
                        supportInput.prop("checked", false);
                    }
                    modal.find('[name="policy"] option').prop('selected', false).filter('[value="' + attrpolicy + '"]').prop('selected', true);

                    modal.foundation('open');
                }
                else if (arptype === 'fed' && arpaction === 'edit') {
                    modal = $("#arpmeditfedattr");
                    modal.find('.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
                    modal.find('span.attributename').first().html(attrname);
                    modal.find('input[name="attrid"]').first().val(attrid);
                    modal.find('input[name="fedid"]').first().val(fedid);
                    modal.find('textarea[name="comment"]').first().val('');
                    modal.find('[name="policy"] option').prop('selected', false).filter('[value="' + attrpolicy + '"]').prop('selected', true);
                    modal.foundation('open');
                }
                else if (arptype === 'entcat' && arpaction === 'edit') {
                    modal = $('#arpmeditentcatattr');
                    modal.find('.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
                    modal.find('span.attributename').first().html(attrname);
                    modal.find('input[name="attrid"]').first().val(attrid);
                    modal.find('input[name="entcatid"]').first().val(entcatid);
                    modal.find('textarea[name="comment"]').first().val('');
                    modal.find('[name="policy"] option').prop('selected', false).filter('[value="' + attrpolicy + '"]').prop('selected', true);
                    modal.foundation('open');
                }
                else if (arptype === 'sp' && arpaction === 'edit') {
                    modal = $('#arpmeditspattr');

                    modal.find('.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
                    modal.find('span.attributename').first().html(attrname);
                    modal.find('span.requestersp').first().html(entityid);
                    modal.find('input[name="attrid"]').first().val(attrid);
                    modal.find('input[name="spid"]').first().val(spid);
                    modal.find('textarea[name="comment"]').first().val('');
                    modal.find('[name="policy"] option').prop('selected', false).filter('[value="' + attrpolicy + '"]').prop('selected', true);

                    var sourcelink = modal.attr('data-jagger-getdata');
                    var modalform = modal.find('form').first();
                    var serializedData = modalform.serializeArray();
                    var custompolicy = modalform.find('[name="custompolicy"]').first();
                    var customvals = modalform.find('[name="customvals"]').first();
                    var customenabled = modalform.find('[name="customenabled"]').first();
                    customvals.empty();
                    var cvals = '';
                    customenabled.prop('checked', false);

                    $.ajax({
                        url: sourcelink,
                        method: "POST",
                        dataType: "json",
                        data: serializedData,
                        success: function (json) {
                            if (json.data) {
                                if (json.data.customsp !== undefined) {


                                    if (json.data.customsp.deny) {
                                        customenabled.prop('checked', true);
                                        modalform.find('[name="custompolicy"] option').prop('selected', false).filter('[value="deny"]').prop('selected', true);
                                        $.each(json.data.customsp.deny, function (io, iv) {
                                            cvals += iv + ', ';
                                        });
                                    }
                                    else if (json.data.customsp.permit) {
                                        customenabled.prop('checked', true);
                                        modalform.find('[name="custompolicy"] option').prop('selected', false).filter('[value="permit"]').prop('selected', true);
                                        $.each(json.data.customsp.permit, function (io, iv) {
                                            cvals += iv + ', ';
                                        });
                                    }
                                    customvals.text(cvals);
                                }

                            }
                        }
                    });
                    modal.foundation('open');
                }
            }


        });
        $('#arpmdelattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmdelattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmdelattr').foundation('close');
                    doReloadTab();

                }
            });
        });
        $('#arpmeditglobalattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmeditglobalattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmeditglobalattr').foundation('close');
                    doReloadTab();

                },
                error: function (xhr, status, error) {

                    $('#arpmeditglobalattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });


        attrpolsVar.on('click', '#addattrsupport button', function (event) {

            var link2 = $('#addattrsupport').attr('data-jagger-link');
            $.ajax({
                url: link2,
                method: 'GET',
                dataType: 'json',
                success: function (json) {
                    if (json.data.support) {
                        var dropdown2 = $('#arpmaddattr').find("select[name='attrid']");
                        dropdown2.find("option").removeAttr('disabled');
                        $.each(json.data.global, function (i, v) {
                            dropdown2.find('option[value=' + i + ']').prop('disabled', 'disabled');
                        });
                    }

                }
            });
            $('#arpmaddattr').foundation('open');
        });

        attrpolsVar.on('click', '#addentcatattr button', function (event) {

            var link2 = $('#addentcatattr').attr('data-jagger-link');
            $.ajax({
                url: link2,
                method: 'GET',
                dataType: 'json',
                success: function (json) {
                    var attrdropdown = $('#arpmaddentcatattr').find("select[name='attrid']");
                    attrdropdown.empty();
                    var entcatdropdown = $('#arpmaddentcatattr').find("select[name='entcatid']");
                    entcatdropdown.empty();
                    if (json.data.support) {
                        $.each(json.data.support, function (k, v) {
                            attrdropdown
                                .append($("<option></option>")
                                    .attr("value", v)
                                    .text(json.definitions.attrs[v]));
                        });
                    }
                    if (json.data.entcats) {
                        $.each(json.data.entcats, function (l, w) {
                            entcatdropdown
                                .append($("<option></option>")
                                    .attr("value", w.entcatid)
                                    .text(w.value));
                        });
                    }

                }
            });
            $('#arpmaddentcatattr').foundation('open');
        });

        attrpolsVar.on('click', '#addespecattr button', function (event) {

            var link2 = $('#addespecattr').attr('data-jagger-link');
            var modal = arpmaddspecattrVar;
            var customvals = modal.find('[name="customvals"]').first();
            customvals.empty();
            modal.find('div.response').first().removeClass('alert').removeClass('alert-box').empty().hide();
            var attrdropdown = modal.find("select[name='attrid']");
            attrdropdown.empty().append($("<option></option>").attr("value", '0').text(''));
            var spdropdown = modal.find("select[name='spid']");
            spdropdown.empty().append($("<option></option>").attr("value", '0').text(''));
            $.ajax({
                url: link2,
                method: 'GET',
                dataType: 'json',
                success: function (json) {

                    if (json.members) {
                        $.each(json.members, function (k, v) {
                            spdropdown
                                .append($("<option></option>")
                                    .attr("value", v.pid)
                                    .text(v.name + ' (' + v.entityid + ')'));
                        });
                    }
                    if (json.attrs) {
                        $.each(json.attrs, function (l, w) {
                            attrdropdown
                                .append($("<option></option>")
                                    .attr("value", w.attrid)
                                    .text(w.name));
                        });
                    }

                    // spdropdown.addClass('select2');

                }
            });
            modal.foundation('open');
            spdropdown.select2({width: "100%"});
            attrdropdown.select2({width: "100%"});
        });

        $('#arpmaddattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmaddattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmaddattr').foundation('close');
                    doReloadTab();

                },
                error: function (xhr, status, error) {

                    $('#arpmaddattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });
        $('#arpmeditfedattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmeditfedattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmeditfedattr').foundation('close');
                    doReloadTab();

                },
                error: function (xhr, status, error) {

                    $('#arpmeditfedattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });

        arpmaddspecattrVar.on('change', 'select', function (event) {
            var selectedname = $(this).attr('name');
            if (selectedname === undefined || !(selectedname === 'spid' || selectedname === 'attrid')) {
                console.log('TT');
            }
            if (selectedname === 'spid') {
                console.log('DDDDDDDDDDDD');
            }

        });

        arpmaddspecattrVar.on('click', 'div.yes', function (event) {
            var modal = arpmaddspecattrVar;
            var response = modal.find('.response').first();
            response.empty().removeClass('alert').removeClass('alert-box').hide();
            var form = modal.find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');


            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    response.empty().removeClass('alert').removeClass('alert-box').hide();
                    modal.foundation('close');
                    doReloadTab();
                },
                error: function (xhr, status, error) {

                    response.html(xhr.responseText).addClass('alert').addClass('alert-box').show();
                }
            });

        });


        $('#arpmeditspattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmeditspattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmeditspattr').foundation('close');
                    doReloadTab();

                },
                error: function (xhr, status, error) {

                    $('#arpmeditspattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });

        $('#arpmeditentcatattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmeditentcatattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmeditentcatattr').foundation('close');
                    doReloadTab();
                },
                error: function (xhr, status, error) {

                    $('#arpmeditentcatattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });
        $('#arpmaddentcatattr').on('click', 'div.yes', function (event) {
            var form = $('#arpmaddentcatattr').find('form').first();
            var serializedData = form.serializeArray();
            var actionlink = form.attr('action');
            $.ajax({
                url: actionlink,
                method: 'POST',
                dataType: "json",
                data: serializedData,
                success: function (json) {
                    $('#arpmaddentcatattr').foundation('close');
                    doReloadTab();

                },
                error: function (xhr, status, error) {

                    $('#arpmaddentcatattr').find('.response').html(xhr.responseText).addClass('alert').addClass('alert-box').show();

                }
            });
        });

    }


    var matrixloader = $('#matrixloader').first();
    var matrixdiv = $('#idpmatrixdiv').first();
    var formupdater = $('#policyupdater').first();
    ////////////// new idpmatrix
    if (matrixloader.length === 1) {

        var formupdaterUrl = formupdater.attr('data-jagger-link');
        var formupdaterAction = formupdater.find('form').first();
        providerdetailurl = matrixloader.attr('data-jagger-providerdetails');
        var mrequester = formupdater.find("span.mrequester").first();
        var mattribute = formupdater.find("span.mattribute").first();
        var updatebutton = formupdater.find("div.yes").first();
        var attrflow = formupdater.find("div.attrflow").first();


        var clickedcell;
        formupdater.on('click', '.yes', function (event) {
            event.preventDefault();

            var actionUrl = formupdaterAction.attr('action');
            $.ajax({
                type: "POST",
                url: actionUrl,
                data: formupdaterAction.serializeArray(),
                success: function (data) {
                    formupdater.foundation('close');
                    if (!clickedcell.hasClass('dis')) {
                        var cell = $.trim(clickedcell.text());
                        if ((data === "2" && (cell === "R" || cell === "D")) || (data === "1" && cell === "R")) {
                            clickedcell.attr('class', 'perm');
                        }
                        else if ((data === "2c" && (cell === "R" || cell === "D")) || (data === "1c" && cell === "R")) {
                            clickedcell.attr('class', 'spec');
                        }
                        else if ((data === "1" && cell === "D") || (data === "0")) {
                            clickedcell.attr('class', 'den');
                        }
                        else if ((data === "1c" && cell === "D") || (data === "0c")) {
                            clickedcell.attr('class', 'den');
                        }

                    }
                }
            });
        });
        matrixdiv.on('click', 'td', function (event) {
            spinImage.show();
            clickedcell = $(this);

            var splink = clickedcell.attr("data-jagger-entidlink");
            if (splink !== undefined) {
                document.location.href = providerdetailurl + '/' + splink;
                return false;
            }
            var spiddata = clickedcell.attr("data-jagger-spid");
            var attrdata = clickedcell.attr("data-jagger-attrid");
            if (spiddata !== undefined && attrdata !== undefined) {
                $.ajax({
                    type: "GET",
                    url: formupdaterUrl + '/' + spiddata + '/' + attrdata,
                    cache: false,
                    dataType: "json",
                    success: function (json) {
                        formupdaterAction.find("select[name='policy']").prop('selected', false).filter('[value=""]').prop('selected', true);
                        formupdaterAction.find("input[name='attribute']").first().val(json.attributename);
                        formupdaterAction.find("input[name='requester']").first().val(json.requester);

                        mrequester.html(json.requester);
                        mattribute.html(json.attributename);
                        var tbody_data = $('<tbody></tbody>');
                        var thdata = '<thead><tr><th colspan="2">Current attribute flow</th></tr></thead>';
                        $.each(json.details, function (i, v) {
                            var trdata = '<tr><td>' + v.name + '</td><td>' + v.value + '</td></tr>';
                            tbody_data.append(trdata);
                        });
                        var tbl = $('<table/>').css({'font-size': 'smaller'}).addClass('detailsnosort').addClass('small-12').addClass('columns');
                        var pl = $('<div/>');
                        tbl.append(thdata);
                        tbl.append(tbody_data);
                        pl.append(tbl);
                        attrflow.html(pl.html());
                        formupdater.foundation('open');

                        spinImage.hide();
                    }
                });
            }
        });
        var pid = matrixloader.attr("data-jagger-link");
        if (typeof pid === "undefined") {
            return false;
        }
        $.ajax({
            type: "GET",
            url: pid,
            cache: false,
            dataType: "json",
            success: function (json) {
                spinImage.hide();

                if (json) {
                    var startTime = new Date();
                    var cl;
                    var mlegend = '<div><span class="den">&nbsp;&nbsp;&nbsp;</span> <span>denied</span></div>' +
                        '<div><span class="perm">&nbsp;&nbsp;&nbsp;</span> <span>permitted</span></div>' +
                        '<div><span class="dis">&nbsp;&nbsp;&nbsp;</span> <span>not supported</span></div>' +
                        '<div><span>R</span> <span>required</span></div>' +
                        '<div><span>D</span> <span>desired</span></div>';
                    var attrdefs = json.attributes;
                    var policies = json.policies;
                    var countpolicies = json.total;
                    var responsemsg = json.message;
                    if (countpolicies !== undefined && countpolicies === 0 && responsemsg !== undefined) {
                        var alerthtml = '<div class="small-12 medium-11 columns small-centered"><div data-alert class="alert-box warning">' + responsemsg + '</div></div>';
                        matrixdiv.html(alerthtml);
                        return false;
                    }
                    var countAttr = 0;
                    var tbl = '<table class="table table-header-rotated" id="idpmatrixresult"><thead><tr>';
                    tbl += '<th style="background: white">' + mlegend + '</th>';
                    $.each(attrdefs, function (a, p) {
                        tbl += '<th class="rotate"><div><span>' + a + '</span></div></th>';
                        countAttr++;
                    });
                    if (countAttr > 52) {
                        $("#container").css({"max-width": "100%"});
                    }

                    var cell, requiredAttr, pAttr;
                    tbl += '</tr></thead><tbody>';
                    $.each(policies, function (i, a) {

                        tbl += '<tr><td data-jagger-entidlink="' + a.spid + '" class="searchcol"><span data-tooltip aria-haspopup="true" class="has-tip" data-options="disable_for_touch:true" title="' + i + '" >' + a.name + '</span><span class="hidden">' + i + '</span></td>';
                        $.each(attrdefs, function (k, v) {
                            requiredAttr = null;
                            if (a.attributes[k] !== undefined) {
                                pAttr = a.attributes[k];
                            }
                            else {
                                pAttr = null;
                            }
                            if (a.req[k] !== undefined) {
                                requiredAttr = a.req[k];
                            }
                            if (requiredAttr !== null) {
                                cell = requiredAttr[0].toUpperCase();
                            }
                            else {
                                cell = '';
                            }
                            if (pAttr !== null) {
                                if (pAttr === 0) {
                                    cl = 'den';
                                }
                                else if (pAttr === 1) {
                                    if (a.custom[k] !== undefined) {
                                        cl = 'spec';
                                    }
                                    else {
                                        cl = 'perm';
                                    }
                                }
                                else {
                                    cl = 'dis';
                                }
                            }
                            else {
                                cl = 'dis';
                            }


                            tbl += '<td data-jagger-spid="' + a.spid + '" data-jagger-attrid="' + v + '" class="' + cl + '" title="' + k + '">';
                            tbl += cell + '</td>';
                        });
                    });
                    tbl += '</tbody></table>';

                    var endTime = new Date();
                    var durationTime = endTime - startTime;
                    console.log('time of generating matrix: ' + durationTime);

                    matrixdiv.html(tbl);
                    var end2Time = new Date();
                    durationTime = end2Time - endTime;
                    console.log('time of input matrinx into DOM: ' + durationTime);
                    $("#idpmatrixresult").searcher({
                        inputSelector: "#tablesearchinput",
                        textSelector: ".searchcol"
                    });
                }
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function (xhr, status, error) {
                spinImage.hide();
                var alerthtml = '<div class="small-12 medium-11 columns small-centered"><div data-alert class="alert-box error">' + error + '</div></div>';
                matrixdiv.html(alerthtml);
                return false;
            }
        });
    }

///////////////////


    var helpactivity = $("#showhelps");
    if (helpactivity.length) {
        if (helpactivity.hasClass('helpactive')) {
            $(".dhelp").show();
        }
        else {
            $(".dhelp").hide();
        }
    }


    var fedlogin = $('#fedlogin').first();
    var fedloginurl = fedlogin.attr('href');
    var browsertime = new Date();
    var browsertimezone = -browsertime.getTimezoneOffset();
    fedlogin.attr('href', '' + fedloginurl + '/' + browsertimezone + '');

    if ($('#fedcategories li.active').length) {
        var url = $('#fedcategories li.active').find('a').first().attr('href');

        var value = $('table.fedistpercat');
        var data;
        $.ajax({
            url: url,
            timeout: 2500,
            cache: true,
            dataType: "json",
            value: $('table.fedistpercat'),
            success: function (data) {
                spinImage.hide();
                if (!data) {
                    window.alert('no data in federation category');
                }
                else {
                    $("table.fedistpercat tbody tr").remove();
                    $.each(data, function (i, v) {
                        var tr_data = '<tr><td>' + v.name + '</td><td>' + v.urn + '</td><td>' + v.labels + '</td><td>' + v.desc + '</td><td>' + v.members + '</td></tr>';
                        value.append(tr_data);
                    });
                }
                //        GINIT.initialize();
            }
        });
    }


    $(".fedcategory").on('click', '', function (event) {

        $(this).closest('ul').find('li').removeClass('active');
        $(this).closest('li').addClass('active');
        var url = $(this).attr("href");
        var value = $('table.fedistpercat');
        var data;
        $.ajax({
            url: url,
            timeout: 2500,
            cache: true,
            dataType: "json",
            value: value,
            success: function (data) {
                spinImage.hide();
                if (!data) {
                    window.alert('no data in federation category');
                }
                else {
                    $("table.fedistpercat tbody tr").remove();
                    $.each(data, function (i, v) {
                        var tr_data = '<tr><td>' + v.name + '</td><td>' + v.urn + '</td><td>' + v.labels + '</td><td>' + v.desc + '</td><td>' + v.members + '</td></tr>';
                        value.append(tr_data);
                    });
                }

            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('problem with loading data');
            }
        }).done(function () {
            var nextrow = value.html();
            //$("table.fedistpercat").append(nextrow);
        });
        return false;
    });


    $(".userlogout").on('click', function (e) {
        var baseurl = $("[name='baseurl']").val();
        var addtitionalLogout = $(this).attr('jagger-data-logout');
        var url = $(this).attr('href');

        var redirecturl = baseurl;
        if (baseurl === null) {
            redirecturl = url;
        }
        if (addtitionalLogout !== null && addtitionalLogout !== '') {
            $.ajax({
                'type': 'GET',
                'url': addtitionalLogout,
                'cache': false
            });
        }
        $.ajax({
            'type': 'GET',
            'url': url,
            'cache': false,
            success: function () {
                window.location.href = redirecturl;
            }

        });
        return false;
    });

});


$(function () {


    var filterElement = $("#filter");
    var filterForm = $('#filter-form');
    $('div.floating-menu').addClass('mobilehidden');
    $('table.idplist tr td:first-child').addClass('homeorg');
    $('table.idplist tr td:first-child span.alert').removeClass('alert').parent().addClass('alert');
    var theTable1 = $('table.filterlist');
    theTable1.find("tbody > tr").find("td:eq(1)").mousedown(function () {
    });
    filterElement.keyup(function () {
        $.uiTableFilter(theTable1, this.value);
    });
    filterForm.submit(function () {
        theTable1.find("tbody > tr:visible > td:eq(1)").mousedown();
        return false;
    }).focus();

    $('table.splist tr td:first-child span.alert').removeClass('alert').parent().addClass('alert');
    var theTable2 = $('table.splist');
    theTable2.find("tbody > tr").find("td:eq(1)").mousedown(function () {
    });
    filterElement.keyup(function () {
        $.uiTableFilter(theTable2, this.value);
    });
    filterForm.submit(function () {
        theTable2.find("tbody > tr:visible > td:eq(1)").mousedown();
        return false;
    }).focus();


    $(".datepicker").datepicker({
        dateFormat: 'yy-mm-dd'
    });

    var baseurl = $("[name='baseurl']").val();
    if (baseurl === undefined) {
        baseurl = '';
    }
    $.ajaxSetup({
        cache: false
    });

    var iqcounter = $('#qcounter');

    if (iqcounter.length > 0) {
        var iqsrc = iqcounter.attr('data-jagger-src');
        var qcounterFromSession = sessionStorage.getItem('jaggerqcounter');
        if (qcounterFromSession !== null) {
            iqcounter.html(parseInt(qcounterFromSession));
        }
        var refresherFn = function () {
            var dashresponsecontainer = $('#dashresponsecontainer').first();
            $.ajax({
                url: iqsrc,
                method: 'GET',
                cache: false,
                dataType: 'json',
                success: function (result) {
                    var thesum = 0;
                    if (result.data) {
                        $.each(result.data, function (v, k) {
                            thesum = thesum + k.length;
                        });
                    }
                    sessionStorage.setItem('jaggerqcounter', thesum);

                    iqcounter.html(thesum);
                    if (dashresponsecontainer) {
                        var rows = [];
                        if (result.definitions) {
                            var defs = result.definitions;
                            rows.push('<table id="detailsi" class="itablesorter"><thead><tr><th>' + defs.date + '</th><th>' + defs.requester + '</th><th>' + defs.requesttype + '</th><th></th></tr><thead><tbody>');
                        }
                        else {
                            rows.push('<table id="detailsi" class="itablesorter"><thead><tr><th>Date</th><th>Requester</th><th>Request type</th><th></th></tr><thead><tbody>');
                        }
                        if (result.data.q) {
                            $.each(result.data.q, function (v, k) {

                                rows.push('<tr><td>' + k.idate + '</td><td>' + k.requesterCN + ' ' + k.mail + '</td><td>' + k.type + ' - ' + k.action + '</td><td><a href="' + baseurl + 'reports/awaiting/detail/' + k.token + '"><i class="fa fa-arrow-right"></i></a></td></tr>');
                            });
                        }
                        if (result.data.s) {
                            $.each(result.data.s, function (v, k) {
                                rows.push('<tr><td>&nbsp;</td><td>' + k.subscriber + ' &lt' + k.subscriber_email + '&gt;</td><td>' + k.type + '</td><td><a href="' + k.url + '"><i class="fa fa-arrow-right"></i></a></td></tr>');
                            });
                        }
                        rows.push('</tbody></table>');
                        var tableresult = rows.join('');
                        dashresponsecontainer.html(tableresult);
                    }
                },
                error: function () {
                    if (dashresponsecontainer) {
                        var errmsg = '<div data-alert class="alert-box alert center">Could not refresh queue</div>';
                        dashresponsecontainer.html(errmsg);
                    }
                }


            });
        };
        setTimeout(refresherFn, 1000);
        setInterval(refresherFn, 30000);
    }


    $("#responsecontainer").load(baseurl + "reports/awaiting/ajaxrefresh");
    setInterval(function () {
        $("#responsecontainer").load(baseurl + 'reports/awaiting/ajaxrefresh');
    }, 172000);


    var languageset = $('#languageset');
    languageset.on('change', 'select', function (e) {
        var link = languageset.find('form').first().attr('action');
        var url = link + this.value;
        $.ajax({
            url: url,
            timeout: 2500,
            cache: false
        }).done(function () {
            languageset.foundation('close');

            setTimeout(function () {
                go_to_private_page();
            }, 1000);

        });
        return false;

    });

    $('select.nuseraccesstype').on('change', function () {
        var access = $(this).find("option:selected");
        var accessselected = access.val();
        if (accessselected === 'fed') {
            $('div.passwordrow').hide();
        }
        else {
            $('div.passwordrow').show();

        }
    });
    $("button#idpadduiiprvurl").click(function () {
        var nf = $("span.idpuiiprvurladd option:selected").val();
        var nfv = $("span.idpuiiprvurladd option:selected").text();
        $("span.idpuiiprvurladd option[value=" + nf + "]").remove();
        $(this).parent().prepend("<li class=\"localized\"><label for=\"f[[uii][idpsso][prvurl][" + nf + "]\">" + nfv + "</label><input id=\"f[uii][idpsso][prvurl][" + nf + "]\" name=\"f[uii][idpsso][prvurl][" + nf + "]\" type=\"text\"/></li>");
    });
    $("button#spadduiiprvurl").click(function () {
        var nf = $("span.spuiiprvurladd option:selected").val();
        var nfv = $("span.spuiiprvurladd option:selected").text();
        $("span.spuiiprvurladd option[value=" + nf + "]").remove();
        $(this).parent().prepend("<li class=\"localized\"><label for=\"f[[uii][spsso][prvurl][" + nf + "]\">" + nfv + "</label><input id=\"f[uii][spsso][prvurl][" + nf + "]\" name=\"f[uii][spsso][prvurl][" + nf + "]\" type=\"text\"/></li>");
    });

    $("button#addlprivacyurl").click(function () {
        var nf = $("li.addlprivacyurl option:selected").val();
        var nfv = $("li.addlprivacyurl option:selected").text();
        $("li.addlprivacyurl option[value=" + nf + "]").toggleOption(false);
        $(this).parent().append("<li class=\"localized\"><label for=\"lprivacyurl[" + nf + "]\">" + nfv + "</label><input id=\"lprivacyurl[" + nf + "]\" name=\"lprivacyurl[" + nf + "]\" type=\"text\"/></li>");
    });
    $("a#fedmetasigner").click(function () {
        var link = $(this), url = link.attr("href");
        $.ajax({
            url: url,
            timeout: 2500,
            cache: false,
            success: function (data) {
                alert(data);
            }
        });
        return false;
    });
    $("a#providermetasigner").click(function () {
        var link = $(this), url = link.attr("href");
        $.ajax({
            url: url,
            timeout: 2500,
            cache: false,
            success: function (data) {
                window.alert(data);
            }
        });
        return false;
    });


    $("a.downloadstat").click(function () {
        var link = $(this), url = link.attr("href");
        var data;
        $.ajax({
            url: url,
            timeout: 2500,
            cache: false,
            dataType: "json",
            success: function (data) {
                if (!data) {
                    window.alert('no data');
                }
                else {
                    window.alert(data.status);
                }

            }
        });
        return false;
    });
    $("a.lateststat").click(function () {
        var link = $(this), url = link.attr("href");
        var value = $('<div id="#statisticdiag">');
        var i;
        $.ajax({
            url: url,
            timeout: 2500,
            cache: true,
            dataType: "json",
            success: function (data) {
                i = null;
                spinImage.hide();
                if (!data) {
                    window.alert('no data');
                }
                else {
                    $("div#statisticdiag").replaceWith('<div id="statisticdiag"></div>');
                    $.each(data, function (i, v) {

                        i = new Image();

                        i.src = v.url;
                        i.onload = function () {
                            $('#statisticdiag').append('<div style="text-align:center; font-weight: bold; width: 90%;">' + v.title + '</div>').append('<div style="font-weight: bolder; width: 90%; text-align: right;">' + v.subtitle + '</div>').append(i);
                        };
                        i.onerror = function () {
                            $('#statisticdiag').append('<div style="text-align:center; font-weight: bold; width: 90%;">' + v.title + '</div>').append('<div style="font-weight: bolder; width: 90%; text-align: right;">' + v.subtitle + '</div>').append('<div data-alert class="alert-box alert">Could not load the image (not found or no access)</div>');
                        }


                    });
                }

            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('problem with loading data');
            }

        });
        return false;
    });
    $("a.clearcache").click(function () {
        var link = $(this), url = link.attr("href");

        $.ajax({
            type: "GET",
            url: url,
            timeout: 2500,
            cache: false,
            success: $(this).remove()
        });
        return false;
    });


    $(".updatebookmark").on('click', function (e) {

        var link = $(this).attr("href");
        var thisobj = $(this);
        var action = $(this).attr("data-jagger-bookmark");
        var postsuccess = $(this).closest("[data-jagger-onsuccess]");
        var postaction = postsuccess.attr('data-jagger-onsuccess');
        if (link === undefined || action === undefined) {
            return false;
        }
        $.ajax({
            url: link + '/' + action,
            type: 'GET',
            success: function (data) {

                if (data && data === 'ok') {

                    if (postaction !== undefined && postaction === 'hide') {
                        postsuccess.hide();
                    }
                    else {
                        thisobj.remove();
                    }
                }

            }
        });
        return false;
    });

    $('table.reqattraddform').addClass('hidden');
    $('button.hideform').addClass('hidden');
    $('form.reqattraddform').addClass('hidden');

    $('button.showform').click(function () {
        $('table.reqattraddform').removeClass('hidden');
        $('form.reqattraddform').removeClass('hidden');
        $('button.showform').addClass('hidden');
        $('button.hideform').removeClass('hidden');
    });
    $('button.hideform').click(function () {
        $('table.reqattraddform').addClass('hidden');
        $('form.reqattraddform').addClass('hidden');
        $('button.showform').removeClass('hidden');
        $('button.hideform').addClass('hidden');
    });
    $("#sortable").sortable();
    $("div.nsortable").sortable();
    $("#sortable").disableSelection();


});

var ww = document.body.clientWidth;

$(document).ready(function () {
    $(".nav li a").each(function () {
        if ($(this).next().length > 0) {
            $(this).addClass("parent");
        }
    });

    $(".toggleMenu").click(function (e) {
        e.preventDefault();
        $(this).toggleClass("active");
        $(".nav").toggle();
    });
//    adjustMenu();


});

$(document).on('click', 'a.refreshurl', function (e) {
    e.preventDefault();
    var link = $(this).attr('data-jagger-getmoreajaxonclick');
    var targetresponseid = $(this).attr('data-jagger-response-msg');
    var refreshbtn = $(this);
    if (targetresponseid === undefined || targetresponseid === null) {
        console.log('attribute data-jagger-response-msg not found in element with data-jagger-getmoreajax="' + link + '" - exiting');
        return false;
    }
    else {
        console.log('attribute data-jagger-response-msg="' + targetresponseid + '" in element data-jagger-getmoreajax="' + link + '"');
    }
    var targetelement = $("div#" + targetresponseid);
    if (targetelement === undefined || targetelement === null || $(targetelement).length === 0) {
        console.log('div with id="' + targetresponseid + '" not found');

        return false;
    }
    else {
        console.log('div with id="' + targetresponseid + '" found');

    }
    $.ajax({
        dataType: "json",
        type: "GET",
        url: link,
        cache: true,
        success: function (data) {
            if (!data) {
                console.log('no json got from ' + link);
                return false;
            }
            var countresult = data.length;
            if (countresult < 1) {
                return false;
            }
            var result = $('<div/>');
            $.each(data, function (i, v) {
                result.append('<div>' + v.msg + '</div>');
            });

            targetelement.empty().append(refreshbtn).append(result).show();


        }
    });
});

$(window).bind('resize orientationchange', function () {
    ww = document.body.clientWidth;
    adjustMenu();
});

var adjustMenu = function () {
    if (ww < 768) {
        $(".toggleMenu").css("display", "inline-block");
        if (!$(".toggleMenu").hasClass("active")) {
            $(".nav").hide();
        } else {
            $(".nav").show();
        }
        $(".nav li").unbind('mouseenter mouseleave');
        $(".nav li a.parent").unbind('click').bind('click', function (e) {
            // must be attached to anchor element to prevent bubbling
            e.preventDefault();
            $(this).parent("li").toggleClass("hover");
        });
    }
    else if (ww >= 768) {
        $(".toggleMenu").css("display", "none");
        $(".nav").show();
        $(".nav li").removeClass("hover");
        $(".nav li a").unbind('click');
        $(".nav li").unbind('mouseenter mouseleave').bind('mouseenter mouseleave', function () {
            // must be attached to li so that mouseleave is not triggered when hover over submenu
            $(this).toggleClass('hover');
        });
    }
};


$(function () {
    $("#details").tablesorter({sortList: [[0, 0]], widgets: ['zebra']});
    $(".userlist#details").tablesorter({sortList: [[4, 1], [0, 0]], widgets: ['zebra']});
    $("#options").tablesorter({sortList: [[0, 0]], headers: {3: {sorter: false}, 4: {sorter: false}}});

    $("#logotabs").tabs({
        load: function (event, ui) {
            $('#availablelogos').unbind();
            $('#assignedlogos').unbind();
            $('#uploadlogo').unbind();
            $("table#details").unbind();
            GINIT.initialize();
        }
    });

});


if ($('#usepredefined').attr('checked')) {
    $("fieldset#stadefext").hide();
}
$("#usepredefined").click(function () {
    if ($(this).is(":checked")) {
        $("#usepredefined").not(this).removeAttr("checked");
        $("fieldset#stadefext").hide();
    }
    else {
        $("fieldset#stadefext").show();
        $("#usepredefined").not(this).addAttr("checked");

    }

});


$("#nattrreqbtn").click(function (ev) {
    var rname = genRandomStr(5);
    var attrselect = $('select[name="nattrreq"]');
    var attrname = attrselect.find(":selected").text();
    var attrid = attrselect.find(":selected").val();
    var newelement = '<fieldset class="fieldset"><legend>' + attrname + '</legend><div class="small-12 columns"><div class="medium-3 columns medium-text-right"><select name="f[reqattr][' + rname + '][status]"><option value="required">required</option><option value="desired">desired</option></select><input type="hidden" name="f[reqattr][' + rname + '][attrname]" value="' + attrname + '"><input type="hidden" name="f[reqattr][' + rname + '][attrid]" value="' + attrid + '"></div><div class="medium-6 columns"><textarea name="f[reqattr][' + rname + '][reason]"></textarea></div><div class="medium-3 column end"><button class="btn reqattrrm inline left button alert" type="button" name="f[reqattr][' + rname + ']">Remove</button></div></div></fieldset>';
    $(this).parent().parent().before(newelement);
    return false;

});

$(".pCookieAccept").on('click', function () {
    var link = $(this).attr("value");
    $.ajax({
        url: link,
        timeout: 2500
    });
    $('#cookiesinfo').hide();
    return false;
});
$("[id='f[entityid]']").change(function () {
    if ($(this).hasClass("alertonchange")) {
        var entalert = $("#entitychangealert").text();
        window.alert(entalert);
    }
});

// When DOM is ready
$(document).ready(function () {
    var baseurl = $("[name='baseurl']").val();
    if (baseurl === undefined) {
        baseurl = '';
    }

    if ($("#eds2").is('*')) {
        $("#idpSelect").modal(
            {
                Height: '500px',
                minHeight: '500px'
            }
        );
    }
    $("#vormversion").click(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: baseurl + 'smanage/reports/vormversion',
            success: function (data) {
                spinImage.hide();
                $("#rvormversion").show();
                $("tr#rvormversion td:first-child").html(data);
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('Error occurred');
            }
        });
        return false;
    });
    $("#vschema").click(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: baseurl + 'smanage/reports/vschema',
            success: function (data) {
                spinImage.hide();
                $("#rvschema").show();
                $("tr#rvschema td:first-child").html(data);
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('Error ocured');
            }
        });
        return false;
    });
    $("#vschemadb").click(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: baseurl + 'smanage/reports/vschemadb',
            success: function (data) {
                spinImage.hide();
                $("#rvschemadb").show();
                $("tr#rvschemadb td:first-child").html(data);
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('Error ocured');
            }
        });
        return false;
    });
    $("#vmigrate").click(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: baseurl + 'smanage/reports/vmigrate',
            success: function (data) {
                spinImage.hide();
                $("#rvmigrate").show();
                $("tr#rvmigrate td:first-child").html(data);
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('Error ocured');
            }
        });
        return false;
    });

    $("#vcerts").click(function () {

        var parent = $(this).closest('div');
        var op = parent.find('select').first();
        var valueselected;
        if (op) {
            var optselected = op.find("option:selected");
            valueselected = optselected.val();
        }
        var splittedvalue = valueselected.split('|');
        var expectedArg1 = ['localidp', 'extidp', 'localsp', 'extsp'];
        var expectedArg2 = ['expired', 'missingencryption', 'missingsigning'];
        var urlParam = '';

        if (splittedvalue[0] !== undefined && splittedvalue[1] !== undefined && expectedArg1.indexOf(splittedvalue[0]) >= 0 && expectedArg2.indexOf(splittedvalue[1] >= 0)) {
            urlParam = '/' + splittedvalue[0] + '/' + splittedvalue[1];
        }
        else {
            alert('incorrect post');
            return false;
        }
        $.ajax({
            cache: false,
            type: "GET",
            url: baseurl + 'smanage/reports/certificates' + urlParam,
            dataType: "json",
            success: function (result) {
                var data = result.data;
                var baseurl = result.definitions.baseurl;
                var calerts = [];
                var rows = [];
                rows.push('<table><tbody>');
                $.each(data, function (k, v) {
                    if (v.alerts) {
                        $.each(v.alerts, function (l, m) {
                            if (m.level) {
                                calerts.push('<div class="alert-box ' + m.level + '" style="" data-alert="">' + m.msg + '</div>');
                            }
                            else {
                                calerts.push('<div>' + m.msg + '</div>');
                            }
                        });
                    }
                    rows.push('<tr><td><a href="' + baseurl + 'providers/detail/show/' + v.id + '">' + v.entityid + '</a></td><td>' + calerts.join('') + '</td></tr>');
                    calerts = [];
                });
                rows.push('</tbody></table>');
                spinImage.hide();
                $("#rvcerts").show();
                $("tr#rvcerts td:first-child").html(rows.join(''));
            },
            beforeSend: function () {
                spinImage.show();
            },
            error: function () {
                spinImage.hide();
                window.alert('Error ocured');
            }
        });
        return false;
    });


    $('button[name="fedstatus"]').click(function (ev) {

        var btnVal = $(this).attr('value');
        var additionalMsg = $(this).attr('title');
        if (additionalMsg === undefined) {
            additionalMsg = '';
        }
        var csrfname = $("[name='csrfname']").val();
        var csrfhash = $("[name='csrfhash']").val();
        var baseurl = $("[name='baseurl']").val();
        var fedname = $("#fednameencoded").text();
        var url = baseurl + 'federations/fedactions/changestatus';
        var data = [{name: 'status', value: btnVal}, {name: csrfname, value: csrfhash}, {
            name: 'fedname',
            value: fedname
        }];
        sconfirm('' + additionalMsg + '', function (ev) {
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                success: function (data) {
                    if (data) {
                        if (data === 'deactivated') {
                            $('button[value="disablefed"]').hide();
                            $('button[value="enablefed"]').show();
                            $('button[value="delfed"]').show();
                            $('td.fedstatusinactive').show();
                            $('span.fedstatusinactive').show();
                        }
                        else if (data === 'activated') {
                            $('button[value="disablefed"]').show();
                            $('button[value="enablefed"]').hide();
                            $('button[value="delfed"]').hide();
                            $('td.fedstatusinactive').hide();
                            $('span.fedstatusinactive').hide();
                        }
                        else if (data === 'todelete') {
                            $('button[value="disablefed"]').hide();
                            $('button[value="enablefed"]').hide();
                            $('button[value="delfed"]').hide();
                        }

                    }
                },
                error: function (data) {
                    window.alert('Error  ocurred');
                }

            });
        });
    });
    $("#rmstatdef").on('click', 'button', function (ev) {
        var url = $("form#rmstatdef").attr('action');
        var serializedData = $("#rmstatdef").serialize();
        sconfirm('', function (ev) {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: serializedData,
                    success: function (data) {

                        revealAlert($('#resultdialog .message').html(), 'ok');

                    },
                    error: function (data) {
                        window.alert('Error');
                    }
                });
            }
        );
        ev.preventDefault();
    });

    $("#rmfedcategory").click(function (ev) {
        var form = $(this).closest('form');
        var url = form.attr('action');
        var serializedData = $(this).serialize();
        sconfirm('', function (ev) {
            $('<input>').attr({
                type: 'hidden',
                id: 'formsubmit',
                name: 'formsubmit',
                value: 'remove'
            }).appendTo('form');
            form.submit();

        });
        ev.preventDefault();
    });
    $("#rmfedvalidator").click(function (ev) {
        var form = $(this).closest('form');
        var url = form.attr('action');
        var serializedData = $(this).serialize();
        sconfirm('', function (ev) {
            $('<input>').attr({
                type: 'hidden',
                id: 'formsubmit',
                name: 'formsubmit',
                value: 'remove'
            }).appendTo('form');
            form.submit();

        });
        ev.preventDefault();
    });


    $(document).on('submit', "#notificationaddform", function (e) {
        e.preventDefault();
        var notiform = $(this);
        var serializedData = notiform.serializeArray();
        $.ajax({
            type: "POST",
            url: notiform.attr('action'),
            data: notiform.serializeArray(),
            success: function (data) {
                $(".message").html(data);
                if (data === 'OK') {
                    $('#notificationaddmodal').foundation('close');
                    location.reload();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                window.alert('Error occured: ' + errorThrown);
            }
        });


    });

    $(document).on('open.zf.reveal', '#notificationaddmodal', function () {
        var modal = $(this);
        $('select#sfederation').parent().hide();
        $('select#sprovider').parent().hide();
        $('select#type').change(function () {
            $('select#sfederation').parent().hide();
            $('select#sprovider').parent().hide();
            var optionSelected = $(this).find("option:selected");
            var valueSelected = optionSelected.val();
            var textSelected = optionSelected.text();
            var selfed = $('#sfederation');
            var selprovider = $('#sprovider');
            selfed.find('option').remove();
            selprovider.find('option').remove();
            if (valueSelected === "joinfedreq" || valueSelected === "fedmemberschanged" || valueSelected === "fedmembersmodified") {
                $.ajax({
                    type: "GET",
                    url: baseurl + 'ajax/getfeds',
                    cache: true,
                    success: function (json) {
                        $.each(json, function (key, value) {
                            $('<option>').val(value.id).text(value.name).appendTo(selfed);
                        });
                        $('select#sfederation').parent().show();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $(".message").html(errorThrown);
                    }

                });
            }
            else if (valueSelected === "requeststoproviders" || valueSelected === "providermodified") {
                $.ajax({
                    type: "GET",
                    url: baseurl + 'ajax/getproviders',
                    cache: false,
                    datatype: "json",
                    success: function (data) {
                        $.each(data, function (key, value) {
                            $('<option>').val(value.key).text(value.value).appendTo(selprovider);
                        });
                        $('select#sprovider').parent().show();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $(".message").html(errorThrown);
                    }

                });
            }
        });//end change

    });


    function sconfirm(message, callback) {
        var modal = $('#sconfirm');
        modal.find('.message').html(message + '&nbsp;');
        modal.on('open.zf.reveal', function (e) {
            var yesbtn = modal.find('.yes').first();
            var nobtn = modal.find('.no').first();
            yesbtn.off().on('click', function () {
                callback.apply();
                modal.foundation('close');
            });
            nobtn.off().on('click', function () {
                modal.foundation('close');
            });
        });
        modal.foundation('open');
    }
});


$(".submit").click(function () {
    return false;
});

$('#joinfed').on('change', '#fedid', function (e) {

    $("div.validaronotice").hide();
    $("ul.validatorbuttons").replaceWith('<ul class="button-group validatorbuttons"></ul>');
    var csrfname = $("[name='csrfname']").val();
    var csrfhash = $("[name='csrfhash']").val();
    if (csrfname === undefined) {
        csrfname = '';
    }
    if (csrfhash === undefined) {
        csrfhash = '';
    }
    var soption = $(this).find("option:selected").val();
    var sval = $(this).find("option:selected").text();
    var jsurl = $('#retrfvalidatorjson').text();
    var postdata = {};
    postdata[csrfname] = csrfhash;
    postdata.fedid = soption;

    if (soption !== 0) {
        $.ajax({
            type: "POST",
            url: jsurl,
            timeout: 2500,
            cache: true,
            data: postdata,
            dataType: "json",
            success: function (data) {
                spinImage.hide();
                if (data) {
                    var validatorButtons = $("ul.validatorbuttons");
                    $.each(data, function (i, v) {
                        validatorButtons.append('<li><button  value="' + jsurl + '/' + v.fedid + '/' + v.id + '" class="button">' + v.name + '</button></li>');
                    });
                    $("div.validaronotice").show();
                }
            },
            beforeSend: function () {
                spinImage.show();

            },
            error: function () {
                spinImage.hide();
                $('#fvform').hide();
                $('#fvresult').hide();
            }
        }).done(function () {
            BINIT.initFvalidators();
        });
    }
});


$("#showhelps").click(function (e) {
    e.preventDefault();
    var url = $(this).attr('href');
    var param = "n";

    if ($("#showhelps").hasClass('helpactive')) {
        param = "n";
    }
    else {
        param = "y";
    }

    $.ajax({
        type: 'GET',
        url: url + '/' + param,
        success: function () {
            $("#showhelps").toggleClass('helpinactive').toggleClass('helpactive').toggleClass('active');
            $(".dhelp").toggle();

        }
    });
});

$("div.section").parent().addClass("section");


$("#notificationupdateform").on('submit', function (e) {

    e.preventDefault();
    var serializedData = $(this).serializeArray();
    var posturl = $(this).attr('action');
    var notid = parseInt($("input[name=noteid]").val());

    var buttonwithval = $('button[type="button"][value="' + notid + '"]');

    var ctr = $(buttonwithval).closest("tr");
    var subsriptionstatus = ctr.find('div.subscrstatus:first');
    $.ajax({
        type: "POST",
        url: posturl,
        data: serializedData,
        dataType: "json",
        success: function (data) {

            if (data) {


                var foundrecord = false;

                $.each(data, function (i, v) {
                    if (foundrecord === false && parseInt(v.id) === notid) {

                        foundrecord = true;

                        subsriptionstatus.text(v.langstatus);
                    }
                    if (foundrecord === false) {
                        ctr.hide();
                    }

                });

            }

            $('#notificationupdatemodal').foundation('close');
            location.reload();
        },
        error: function (jqXHR, textStatus, errorThrown) {
            window.alert('Error occured: ' + errorThrown);
        }


    });

});

$(document).on('submit', '#loginform form', function (e) {
    e.preventDefault();
    var loginform = $("#loginform");
    var submitbutton = $(loginform).find(":submit").first();
    var secondfactorrow = $(loginform).find("div.secondfactorrow").first();
    var link = $("div#loginform form").attr('action');
    var str = $(this).serializeArray();
    var browsertime = new Date();
    var browsertimezone = -browsertime.getTimezoneOffset();
    str.push({name: 'browsertimeoffset', value: '' + browsertimezone + ''});
    var baseurl = $("[name='baseurl']").val();

    $.ajax({
        type: "POST",
        cache: false,
        timeout: 3500,
        url: link, // Send the login info to this page
        data: str,
        beforeSend: function () {
            $("#loginresponse").html("").hide();

        },
        success: function (data) {
            if (data) {
                if (data.success === true && data.result === 'OK') {
                    loginform.foundation('close');
                    spinImage.show();
                    setTimeout(function () {

                        window.location.href = baseurl;
                    }, 1000);

                }
                else if (data.result === 'secondfactor') {
                    $('#password').val('');
                    secondfactorrow.empty();
                    secondfactorrow.append(data.html).show();
                    submitbutton.prop('disabled', true);

                }
            }
            else {
                $("#loginresponse").html(data).show();

            }

        },
        error: function (jqXHR, textStatus, errorThrown) {
            $("#loginresponse").html(jqXHR.responseText).show();

        }
    });
    return false;

});
$("button.advancedmode").click(function () {
    var modalnotice = $('span.modalnotice').text();
    var metadata = $("textarea#metadatabody").val().trim();
    if (metadata.length < 20) {
        window.alert(modalnotice);
    }
    var thisB = $(this);
    var postUrl = thisB.val();
    var csrfname = $("[name='csrfname']").val();
    var csrfhash = $("[name='csrfhash']").val();
    $(this).closest("form").attr("action", postUrl);

});
//////////////// start test new table jnlexample
if ($('#providerslistresultv2').length) {

    var jnl = $('#providerslistresultv2').first();
    var url = jnl.attr("data-jagger-src");

    $.ajax({
        type: "GET",
        url: url,
        cache: true,
        dataType: "json",
        success: function (result) {
            spinImage.hide();
            var langdefs = result.definitions.lang;
            var table = $('<table/>');
            var thead = $('<thead/>');
            var tfoot = $('<tfoot/>');
            table.append(thead);
            table.append(tfoot);
            var theadtr = $('<tr/>');
            var tfoottr = $('<tr/>');
            thead.append(theadtr);
            tfoot.append(tfoottr);

            var Columns = [];
            var tmpcolumns = result.columns;
            var colstatus;
            var counter = 0;
            theadtr.append('<th class="header">s</th>');
            tfoottr.append('<th class="header">s</th>');
            $.each(tmpcolumns, function (i, v) {
                colstatus = v.status;
                if (colstatus) {
                    var nar = [];
                    $.each(v.cols, function (l, n) {
                        nar.push(n);
                    });
                    Columns.push(nar);
                    theadtr.append('<th class="header">' + v.colname + '</th>');
                    tfoottr.append('<th class="header">' + v.colname + '</th>');

                    counter = counter + 1;
                }
            });


            var data = result.data;
            var dataSet = [];
            var rowSet;
            $.each(data, function (j, w) {
                rowSet = [];
                rowSet.push(w.plocal);
                $.each(Columns, function (p, z) {
                    var cell = '';
                    $.each(z, function (r, s) {
                        if (w[s] !== null) {
                            if (s === 'pname') {
                                cell = cell + '<a href="' + result.baseurl + 'providers/detail/show/' + w.pid + '">' + w[s] + '</a><br />';

                            }
                            else if (s === 'phelpurl') {
                                cell = cell + '<a href="' + w.phelpurl + '">' + w.phelpurl + '</a>';
                            }
                            else if (s === 'plocked' || s === 'pactive' || s === 'plocal' || s === 'pstatic' || s === 'pvisible' || s === 'pavailable') {
                                if (result.statedefs[s][w[s]] !== undefined) {
                                    cell = cell + ' <span class="lbl lbl-' + s + '-' + w[s] + '">' + result.statedefs[s][w[s]] + '</span>';
                                }
                            }
                            else if (s === 'contacts') {
                                $.each(w.contacts, function (j, h) {
                                    cell = cell + '<span class="label">' + h.type.charAt(0).toUpperCase() + '</span> ' + h.mail + '<br />';
                                });
                                //cell = cell + w.contacts.join("<br />");
                            }
                            else {
                                cell = cell + '  ' + w[s];
                            }
                        }
                    });
                    rowSet.push(cell.trim());

                });
                dataSet.push(rowSet);
            });


            jnl.append(table);
            var table2 = table.DataTable({
                dom: '<"text-right"lB><"text-left"i>frtip',
                buttons: [
                    {
                        text: langdefs.btnexternal,
                        className: 'tiny'
                    },
                    {
                        text: langdefs.btnlocal,
                        className: 'tiny'
                    },
                    {
                        className: 'tiny',
                        extend: 'colvis', postfixButtons: ['colvisRestore'], columns: ':gt(1)'
                    }

                ],
                columnDefs: [
                    {
                        "targets": [0],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [4],
                        "visible": false
                    }
                ],
                "order": [[1, "asc"]],
                "paging": true,
                stateSave: true,
                "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
                data: dataSet,
                "language": {
                    "lengthMenu": "Display _MENU_ records per page",
                    "zeroRecords": "Nothing found - sorry",
                    // "info": "Showing page _PAGE_ of _PAGES_",
                    "infoEmpty": "No records available",
                    "infoFiltered": "(filtered from _MAX_ total records)",
                    "paginate": {
                        "next": langdefs.next,
                        "previous": langdefs.previous
                    }
                },
                "defereRender": true

            });
            table2.button(0).action(function (e, dt, button, config) {

                if (button.hasClass('active')) {
                    this.active(false);
                    $('#entityc').val('').trigger('change');
                }
                else {
                    this.active(true);
                    table2.button(1).active(false);
                    $('#entityc').val('external').trigger('change');
                }
            });

            table2.button(1).action(function (e, dt, button, config) {
                if (button.hasClass('active')) {
                    this.active(false);
                    $('#entityc').val('').trigger('change');
                }
                else {
                    this.active(true);
                    table2.button(0).active(false);
                    $('#entityc').val('local').trigger('change');
                }
            });

            $('#entityc').on('change', function () {

                console.log('chanmge triggered');
                table2.draw();
            });

        },
        beforeSend: function () {
            spinImage.show();
        },
        error: function (xhr, status, error) {
            spinImage.hide();
            console.log(xhr);
            console.log(status);
            console.log(error);
            window.alert(error);

        }
    });
}

//////////////// end test new table jnlexample

// get list providers with dynamic list columns: in progress
$(".afilter").click(function () {

    var url = $(this).attr("href");

    var filter;
    if ($(this).hasClass('filterext')) {
        filter = 1;
    }
    else if ($(this).hasClass('filterlocal')) {
        filter = 2;
    }
    else {
        filter = 0;
    }
    $('a.initiated').removeClass('initiatied');
    $.ajax({
        type: "GET",
        url: url,
        timeout: 9500,
        cache: true,
        dataType: "json",
        success: function (result) {
            spinImage.hide();
            if (filter === 1) {
                $('dd.filterext').addClass('active');
            }
            else if (filter === 2) {
                $('dd.filterlocal').addClass('active');
            }
            else {
                $('dd.filterall').addClass('active');
            }

            if (result) {
                var table = $('<table/>');
                table.attr('id', 'details');
                table.addClass('filterlist');
                var thead = $('<thead/>');
                table.append(thead);
                var theadtr = $('<tr/>');
                thead.append(theadtr);

                var Columns = [];
                var tmpcolumns = result.columns;
                var colstatus;
                var counter = 0;
                $.each(tmpcolumns, function (i, v) {
                    colstatus = v.status;
                    if (colstatus) {
                        var nar = [];
                        $.each(v.cols, function (l, n) {
                            nar.push(n);
                        });
                        Columns.push(nar);
                        theadtr.append('<th>' + v.colname + '</th>');
                    }
                });
                var tbody = $('<tbody/>');
                table.append(tbody);
                var data = result.data;
                var startTime = new Date();
                var tbodyToInsert = [];
                var a = 0;
                $.each(data, function (j, w) {
                    if ((w.plocal === 1 && (filter === 2 || filter === 0)) || (w.plocal === 0 && filter < 2)) {
                        tbodyToInsert[a++] = '<tr>';
                        $.each(Columns, function (p, z) {
                            var cell = '';
                            $.each(z, function (r, s) {
                                if (w[s] !== null) {
                                    if (s === 'pname') {
                                        cell = cell + '<a href="' + result.baseurl + 'providers/detail/show/' + w.pid + '">' + w[s] + '</a><br />';

                                    }
                                    else if (s === 'phelpurl') {
                                        cell = cell + '<a href="' + w.phelpurl + '">' + w.phelpurl + '</a>';
                                    }
                                    else if (s === 'plocked' || s === 'pactive' || s === 'plocal' || s === 'pstatic' || s === 'pvisible' || s === 'pavailable') {
                                        if (result.statedefs[s][w[s]] !== undefined) {
                                            cell = cell + ' <span class="lbl lbl-' + s + '-' + w[s] + '">' + result.statedefs[s][w[s]] + '</span>';
                                        }
                                    }
                                    else {
                                        cell = cell + '  ' + w[s];
                                    }
                                }
                            });
                            tbodyToInsert[a++] = '<td>' + cell + '</td>';

                        });
                        counter++;
                        tbodyToInsert[a++] = '</tr>';

                    } //end filter condtion
                });
                tbody.append(tbodyToInsert.join(''));
                var endTime = new Date();
                var durationTime = endTime - startTime;
                console.log('Providerlist table gen time: ' + durationTime);
                var prefix = $('div.subtitleprefix').text();
                $('div.subtitle').empty().append(prefix + ': ' + counter);
                $('div#providerslistresult').append(table);
                if (counter > 1) {
                    table.tablesorter({sortList: [[0, 0]]});
                    $("#filter").keyup(function () {
                        $.uiTableFilter(table, this.value);
                    });
                    $('#filter-form').submit(function () {
                        table.find("tbody > tr:visible > td:eq(1)").mousedown();
                        return false;
                    }).focus();
                }
            }
        },
        beforeSend: function () {
            $('dd.afilter').removeClass('active');
            $('div#providerslistresult').empty();
            $('div.alert-box').empty().hide();
            spinImage.show();

        },
        error: function (xhr, status, error) {
            spinImage.hide();
            $('div.subtitle').empty();
            $('div.alert-box').append(error).show();

        }
    });
    return false;
});

$('a.initiated').trigger('click');


$('button[name="mrolebtn"]').click(function (e) {
    var link = $(this).attr('value');
    $.ajax({
        type: "GET",
        url: link,
        timeout: 2500,
        cache: false,
        dataType: "json",
        success: function (json) {
            var rarray = [];
            $.each(json, function (ig, vg) {
                rarray.push(vg);

            });
            $("input[name='checkrole[]']").each(function () {
                var val = $(this).attr('value');
                var cc = $(this).attr('checked');


                if ($.inArray(val, rarray) === -1) {

                    $(this).prop("checked", false);

                }
                else {
                    $(this).prop("checked", true);
                }
            });

        }
    });
});


$('button[name="update2f"]').click(function (e) {
    e.preventDefault();
    var form = $(this).parents('form:first');
    var alertDiv = form.find('div.alert-box');
    var link = form.attr('action');
    $.ajax({
        type: 'POST',
        url: link,
        cache: false,
        data: form.serializeArray(),
        dataType: "json",
        success: function (json) {

            alertDiv.hide();

            if (json) {
                var txtToReplace = '';
                $.each(json, function (i, v) {
                    txtToReplace = txtToReplace + v + ',';
                });
                $('span#val2f').empty().append(txtToReplace.substring(0, txtToReplace.length - 1));
            }
            $('#m2f').foundation('close');

        },
        error: function (jqXHR, textStatus, errorThrown) {
            alertDiv.html(errorThrown).show();
        }


    });

});

var checkRegpol;
$('input[type="radio"].withuncheck').on('hover', function () {
    checkRegpol = $(this).is(':checked');
}).on('click', function () {
    checkRegpol = !checkRegpol;
    $(this).attr('checked', checkRegpol);
});


$(document).on('click', '#resetloginform', function (e) {
    e.preventDefault();
    var baseurl = $("[name='baseurl']").val();
    $.ajax({
        type: 'GET',
        url: baseurl + 'authenticate/resetloginform',
        cache: false,
        success: function (data) {
            $(".secondfactorrow").empty();
            $("#loginform").foundation('close');
            return false;
        }
    });
});
$(document).on('click', '#duo_form', function (e) {
    var link = $(this).attr('action');
    var secondfactorrow = $('.secondfactorrow');
    $.ajax({
        type: 'POST',
        url: link,
        cache: false,
        data: $(this).serializeArray(),
        beforeSend: function () {
            $("#loginresponse").html("").hide();

        },
        success: function (data) {
            if (data) {
                if (data.success === true && data.result === 'OK') {
                    $('#loginform').foundation('close');

                    setTimeout(function () {
                        go_to_private_page();
                    }, 1000);

                }
                else if (data.result === 'secondfactor') {
                    secondfactorrow.append(data.html).show();

                }
            }
            else {
                $("#loginresponse").html(data).show();

            }

        },
        error: function (jqXHR, textStatus, errorThrown) {
            $("#loginresponse").html(jqXHR.responseText).show();

        }
    });
    return false;
});

$(document).ready(
    function () {
        var autoclick = $("a.autoclick");
        if (autoclick !== undefined) {
            autoclick.click();
        }
        //  $("a.autoclick")[0].click();
    }
);

$('.oidclink').on('click', function (e) {
    e.preventDefault();

    var url = $(this).attr('href');
    var csrfname = $("[name='csrfname']").val();
    var csrfhash = $("[name='csrfhash']").val();
    var op = $(this).attr('data-jagger-oidc');
    var data = [{name: csrfname, value: csrfhash}, {
        name: 'op',
        value: op
    }];
    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        cache: false,
        dataType: 'json',
        success: function (json) {
            window.location.href = json.redirect;
        }

    });
});

$("#updateprefsmodal").on('submit', function (e) {
    e.preventDefault();
    var modal = $(this);
    var link = modal.attr('data-jagger-link');
    var alertDiv = modal.find('div.alert').first();
    var form = modal.find('form').first();
    $.ajax({
        'url': link,
        'type': 'POST',
        'cache': false,
        'data': form.serializeArray(),
        success: function (data) {
            if (data) {
                if (data.result === 'OK') {
                    var sRecord = $(document).find('[data-jagger-record="' + data.confname + '"]').first();


                    var rowRecord = sRecord.closest('tr');
                    var type = data.type;
                    if (type === 'text') {

                        rowRecord.find('span[data-jagger-name="vtext"]').first().html(nl2br(data.vtext, false));
                    }
                    var sStatus = rowRecord.find('span[data-jagger-name="status"]').first();
                    if (data.status) {
                        sStatus.removeClass('alert').html(data.statusstring);
                    }
                    else {
                        sStatus.addClass('alert').html(data.statusstring);
                    }

                    modal.foundation('close');
                }
                else if (data.error) {
                    alertDiv.html(data.error).show();
                }
            }
            else {
                alertDiv.html('No data').show();
            }

        },
        error: function (jqXHR, textStatus, errorThrown) {
            alertDiv.html(errorThrown).show();
        }
    });
});

$(document).on('click', 'a.updateprefs', function (e) {
    e.preventDefault();
    var modal = $("#updateprefsmodal");
    var geturl = $(this).attr('href');
    if (modal === undefined || geturl === undefined) {
        return false;
    }
    var eDisplayname = modal.find('span[data-jagger-name="displayname"]').first();
    var eConfname = modal.find('input[name="confname"]').first();
    var eDescription = modal.find('div[data-jagger-name="desc"]').first();
    var eStatus = modal.find('input[name="status"]').first();
    var eText = modal.find('textarea[data-jagger-name="vtext"]').first();
    var alertDiv = modal.find('div.alert').first();
    alertDiv.html('').hide();


    if (eText === null) {
        window.alert("d");
    }
    $.ajax({
        'url': geturl,
        'type': 'GET',
        'cache': false,
        success: function (data) {
            if (data) {
                eDisplayname.html('"' + data.displayname + '"');
                eConfname.val(data.confname);
                eDescription.html('<b>' + data.displayname + ':</b> ' + data.desc);
                var type = data.type;
                if (type === 'text') {

                    eText.val(data.vtext);
                    eText.closest('div.row').show();

                }
                else {
                    eText.closest('div.row').hide();
                }

                if (data.status === true) {

                    eStatus.prop('checked', true);
                }
                else {
                    eStatus.prop('checked', false);
                }

            }
        }


    });

    modal.foundation('open');
    return false;

});
$("#updatemembership").on('click', '.yes', function (e) {

    var form = $("#updatemembership").find('form');
    var url = form.attr('action');
    var data = form.serializeArray();
    $.ajax({
        url: url,
        type: 'post',
        data: data,
        dataType: 'json',
        success: function (result) {
            if (result.message) {
                revealAlert(result.message, 'OK');
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            revealAlert('<div class="alert-box alert ">' + jqXHR.responseText + '</div>', 'OK');
        }
    });
    return false;
});

$('button.revealc').on('click', function () {
    var valtopass = $(this).val();
    var msg = $(this).attr('data-jagger-desc');
    var modal = $("#updatemembership");
    var msgdesc = modal.find('div.message').first();
    if (msgdesc) {
        msgdesc.html(msg);
    }
    var updatedata = modal.find('input[name="updatedata"]');
    updatedata.val(valtopass);
    modal.foundation('open');
});


$(".select2").select2();
$("#itestcombo").select2();

function genAttrUsage(jsondata, returnType) {
    var prefixUrl = Jagger.base_url + 'providers/detail/show/';
    var b = [];
    var fedsList = [];
    var spsList = [];
    $.each(jsondata.requested_by, function (k, v) {
        if (v.type === 'provider') {
            spsList.push('<div><a href="' + prefixUrl + v.id + '">' + v.entityid + '</a></div>');
        }
        else if (v.type === 'federation') {
            fedsList.push('<div>Federation: ' + v.name + '</div>');
        }
    });
    b.push('<div class="small-12 column">');
    b.push('Name: ' + jsondata.name);
    b.push('</div>');
    b.push('<div class="small-12 column">');


    b.push('<ul class="accordion" data-accordion data-allow-all-closed="true" data-multi-expand="true">');
    b.push('<li class="accordion-item" data-accordion-item>' +
        '<a href="#" class="accordion-title">supported by ' + jsondata.supported_by.length + ' Identity Providers</a>' +
        '<div class="accordion-content" data-tab-content>');
    $.each(jsondata.supported_by, function (k, v) {
        b.push('<div><a href="' + prefixUrl + v.id + '">' + v.entityid + '</a></div>');
    });
    b.push('</div></li>');
    b.push('<li class="accordion-item" data-accordion-item>' +
        '<a href="#" class="accordion-title">requested by ' + spsList.length + ' Service Providers');
    if (fedsList.length > 0) {
        b.push(' and ' + fedsList.length + ' Federations');
    }
    b.push('</a>');
    b.push('<div class="accordion-content" data-tab-content>');
    b.push(fedsList.join(''));
    b.push(spsList.join(''));
    b.push('</div></li>');
    b.push('</ul>');
    b.push('</div>');

    return b.join('');

}


var genModalForm = function (params, size) {
    var method = 'POST';
    var submittext = 'submit';
    var canceltext = 'cancel';
    if (params.method) {
        method = params.method;
    }
    if (params.submittext) {
        submittext = params.submittext;
    }
    if (params.canceltext) {
        canceltext = params.canceltext;
    }
    var el = [];
    el.push('<div class="reveal ' + size + '" data-reveal>');
    el.push('<div class="small-12 column response alert-box alert hidden" alert-data></div>');
    el.push('<form method="' + method + '" action="' + Jagger.base_url + params.actionuri + '" class="' + params.formclass + '">');
    el.push('<input type="hidden" name="' + Jagger.csrfname + '" value="' + Jagger.csrfhash + '">');
    if (params.confirmationtext) {
        el.push('<div class="small-12 column"><h5>' + params.confirmationtext + '</h5></div>');
    }
    if (params.forminputs) {
        var item;
        var formInputsLength = params.forminputs.length;
        for (var i = 0; i < formInputsLength; i++) {
            item = params.forminputs[i];
            console.log(item);
            if (item.element === 'input') {
                if (item.type === 'hidden') {
                    el.push('<input type="hidden" name="' + item.name + '" value="' + item.value + '">');
                }
            }
        }
    }
    el.push('<div class="small-12 column text-right"><div class="button-group"><a data-close class="button alert cancel">' + Jagger.getLangLine(canceltext) + '</a><button type="submit" class="button submit">' + Jagger.getLangLine(submittext) + '</button></div></div>');
    el.push('</form>');
    el.push('</div>');
    return $('' + el.join('') + '').foundation();
};

$(document).on('submit', '.delattrform', function () {
    var mythis = $(this);
    var myform = mythis.closest('form');
    var attrid = myform.find("[name='attrid']").val()
    var mymodal = mythis.closest('div.reveal');
    var response = mymodal.find('.response').first();
    $.ajax({
        url: myform.attr('action'),
        method: myform.attr('method'),
        data: myform.serialize(),
        fataType: "json",
        beforeSend: function () {
            response.empty().hide();
        },
        success: function (e) {
            var mycell = $("[data-jagger-attrid='" + attrid + "']");
            if (mycell !== 'undefined') {
                mycell.closest('tr').remove();
            }
            mymodal.foundation('close');
        },
        error: function (xhr, status, error) {
            console.log(xhr);
            response.html(xhr.responseText).show();
        }
    });
    return false;
});

$(".delattribute").click(function (e) {
    var thisElement = $(this);
    var attrid = thisElement.attr('data-jagger-attrid');
    var attrname = thisElement.attr('data-jagger-attrname');

    var params = {
        method: "POST",
        formclass: "delattrform",
        actionuri: "attributes/attributes/remove",
        confirmationtext: "Are you sure you want to remove attribute:  " + attrname + "?",
        submittext: "remove",
        canceltext: "cancel",
        forminputs: [
            {
                name: "attrid",
                value: attrid,
                element: "input",
                type: "hidden"
            },
            {
                name: "attrname",
                value: attrname,
                element: "input",
                type: "hidden"
            }
        ]
    };
    //   Jagger.confirmFormModal(Jagger.helperModal);
    Jagger.confirmFormModal(genModalForm(params, 'tiny'));
});


$("#inviteuserform").on("submit", function(e){
    e.preventDefault();
    var myform = $(this).closest('form');
    var responsemsg = $("#invusrresp");
    $.ajax({
        url: myform.attr('action'),
        method: myform.attr('method'),
        data: myform.serialize(),
        beforeSend: function () {
          responsemsg.empty().hide();
        },
        success: function(z){
            responsemsg.removeClass('alert').addClass('success').html('Success').show();
        },
        error: function(xhr, status, error){

            responsemsg.removeClass('success').addClass('alert').html(xhr.responseText).show();
        }
    });
});

$("#invverify").on("submit", function(e){
    e.preventDefault();
    var myform = $(this).closest('form');

    var invverifyerror = $("#invverifyerror");
    $.ajax({
        url: myform.attr('action'),
        method: myform.attr('method'),
        data: myform.serialize(),
        beforeSend: function () {
            invverifyerror.hide().empty();
        },
        success: function (z) {
            invverifyerror.hide();
            if(z){
                alert(z);
            }else{
                alert("success");
            }
        },
        error: function (xhr, status, error) {
            invverifyerror.html(xhr.responseText).show();
        }
    });
});
$("#massmailform").on("submit", function (e) {
    e.preventDefault();
    var myform = $(this).closest('form');
    var alertbox = $("#massmailerror");
    alertbox.hide().empty();
    console.log(alertbox);

    $.ajax({
        url: myform.attr('action'),
        method: myform.attr('method'),
        data: myform.serialize(),
        beforeSend: function () {
            alertbox.hide().empty();
        },
        success: function (z) {
            alertbox.hide();
            myform.trigger("reset")
            if(z){
                alert(z);
            }else{
                alert("mail sent");
            }

        },
        error: function (xhr, status, error) {
            alertbox.html(xhr.responseText).show();

        }

    });


});
$(".attrinfo").click(function (e) {
    var thisElement = $(this);
    var thisI = thisElement.find('i').first();
    var attrid = thisElement.attr('data-jagger-attrid');
    var currRow = thisElement.closest('tr');
    var nextRow = currRow.next();
    if (nextRow.hasClass('attrexpanded')) {
        nextRow.remove();
        thisI.toggleClass('fa-compress', false).toggleClass('fa-expand', true);
        return false;
    }
    var noCells = currRow.find('td').length;
    var newRow = $('<tr class="attrexpanded"><td colspan="' + noCells + '"></td></tr>');
    var newRowBody = [];
    var ajaxCall;
    thisI.toggleClass('fa-compress', true).toggleClass('fa-expand', false);
    if (isNaN(attrid)) {
        newRowBody.push('<div> alert </div>');
        ajaxCall = $.ajax();
    }
    else {
        ajaxCall = $.ajax({
            type: 'GET',
            url: Jagger.base_url + 'attributes/attributes/byid/' + attrid,
            dataType: 'json',
            cache: true,
            success: function (result) {
                var z = genAttrUsage(result, 'html');

                newRowBody.push(z);

            }
        });
    }

    ajaxCall.done(function () {
        var inss = newRowBody.join('');
        newRow.find('td').append(inss);
        currRow.after(newRow);
        newRow.foundation();
    });

});
























